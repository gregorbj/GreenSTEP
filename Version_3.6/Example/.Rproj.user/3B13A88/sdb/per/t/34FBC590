{
    "collab_server" : "",
    "contents" : "#==================\n#GreenSTEP_Inputs.r\n#==================\n#Copyright 2009 - 2015, Oregon Department of Transportation\n#Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at\n#http://www.apache.org/licenses/LICENSE-2.0\n#Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the License for the specific language governing permissions and limitations under the License.\n#Version: 3.5 Beta\n#Date: 5/24/15\n\n#Description\n#===========\n#This scripts loads all of the model objects and data needed to run the GreenSTEP model. The objects are stored in 3 lists:\n#  Abbr_ contains naming vectors\n#  Model_ contains all of the model objects\n#  Inputs_ contains all of the scenario inputs\n#After the inputs are read in, formatted and added to the lists, the lists are 'attached' to expose the names of the objects to the global environment.\n\n#Helper functions\n#================\n#Remove NA values from a vector\nwithoutNA <- function(X.) {\n  X.[!is.na(X.)]\n}\n\n#Read a 2-column CSV formatted file as a named vector\n#One column is names and other is values\nreadVectorFile <- function(File, NameCol, ValueCol, ...) {\n  Data.. <- read.csv(File, ...)\n  Values. <- Data..[[ValueCol]]\n  names(Values.) <- Data..[[NameCol]]\n  Values.\n}\n\n#Define naming vectors\n#=====================\nAbbr_ <- list()\n\n#Counties and Metropolitan Areas\nsetwd(ModelDir)\nFilename <- \"county_groups.csv\"\nCountyGroups.. <- read.csv(Filename, as.is = TRUE)\nAbbr_$Co <- unique(CountyGroups..$County)\nAbbr_$Ma <- withoutNA(unique(CountyGroups..$Msa))\nsetwd(RunDir)\n\n#Categories for the age of persons\nAbbr_$Ap <- \n  c(\"Age0to14\", \"Age15to19\", \"Age20to29\", \"Age30to54\", \"Age55to64\", \"Age65Plus\")\n\n#Categories for urban types ( Metropolitan vs. Town )\nAbbr_$Ut <- c(\"Metropolitan\", \"Town\")\n\n#Categories for all development types ( Metropolitan, Town, Rural )\nAbbr_$Dt <- c(\"Metropolitan\", \"Town\", \"Rural\")\n\n#Vehicle types\nAbbr_$Vt <- c(\"Auto\", \"LtTruck\", \"HvyTruck\", \"Bus\")\n\n#Income groups\nAbbr_$Ig <-\n  c(\"0to20K\",\n    \"20Kto40K\",\n    \"40Kto60K\",\n    \"60Kto80K\",\n    \"80Kto100K\",\n    \"100KPlus\")\n\n#Fuel types\nAbbr_$Ft <- c(\"ULSD\", \"Biodiesel\", \"Gasoline\", \"Ethanol\", \"CNG\")\n\n#Congestion levels\nAbbr_$Cl <- c(\"None\", \"Mod\", \"Hvy\", \"Sev\", \"Ext\")\n\n#Types of vehicles\nAbbr_$Ty <- c(\"LtVeh\", \"Truck\", \"Bus\")\n\n#Functional class of roadways\nAbbr_$Fc <- c(\"Fwy\", \"Art\", \"Other\")\n\n#Powertrain types\nAbbr_$Pt <-\n  c(\n    \"LdIceEco\",\n    \"LdIceNonEco\",\n    \"LdHev\",\n    \"LdFcv\",\n    \"LdEv\",\n    \"TruckIce\",\n    \"TruckEv\",\n    \"BusIce\",\n    \"BusEv\"\n  )\n\n#Modes for public transit\nAbbr_$Mp <- \n  c(\"DR\", \"VP\", \"MB\", \"RB\", \"MG\", \"SR\", \"HR\", \"CR\")\n\n#Attach the list\nattach(Abbr_)\n\n#Read in global values\n#=====================\n#The global_values.txt file contains various parameters used by the model.\nsource(paste(ModelDir, \"/global_values.txt\", sep = \"\"))\n\n#Load estimated models and functions\n#===================================\n#The submodels of GreenSTEP are combinations of data and functions. For example,\n#the submodel that adjusts household income distributions based on changes in\n#the distribution of the household age structure consists of a matrix of\n#probabilities and a function to calculate income adjustments based on the\n#matrix of probabilities and other inputs. All of the submodels are contained in\n#the GreenSTEP_.RData file that is composed of a list containing the data and\n#functions for the submodels. This list is attached to the workspace so that\n#each submodel can be called using it's individual name.\n\n#Load the estimated model\nsetwd(ModelDir)\nload(\"GreenSTEP_.RData\")\nattach(GreenSTEP_)\nsetwd(RunDir)\n\n#Load model starting inventory data\n#==================================\n#The starting inventories for the model are also contained in the model\n#directory.\nsetwd(ModelDir)\nModel_ <- list()\n\n#Crosswalk between counties and metropolitan areas\nFilename <- \"county_groups.csv\"\nCountyGroups.. <- read.csv(Filename, as.is = TRUE, row.names = 1)\nModel_$CountyGroups.. <- CountyGroups..\nrm(Filename, CountyGroups..)\n\n#Base year metropolitan and non-metropolitan UGB areas by county\nFilename <- \"ugb_areas.csv\"\nTempInput.. <- read.csv(Filename, row.names = 1)\nModel_$BaseUgbAreas.CoUt <- as.matrix(TempInput..)[Co, Ut]\nrm(Filename, TempInput..)\n\n#Base year metropolitan, town and rural population splits by county\nFilename <- \"urban_rural_pop_splits.csv\"\nTempInput.. <- read.csv(Filename, row.names = 1)\nModel_$UrbRurPopProp.CoDt <- as.matrix(TempInput..)[Co, Dt]\nrm(Filename, TempInput..)\n\n#Revenue-mile factors to convert to bus revenue miles\nModel_$RevMiFactors <- \n  readVectorFile(File = \"revenue_mile_factors.csv\", \n                 NameCol = \"Mode\",\n                 ValueCol = \"Factor\")[Mp]\n\n#Travel demand management parameters for the proportional reduction in VMT by\n#program area\nFilename <- \"tdm_parameters.csv\"\nTemp.. <- read.csv( Filename )\nModel_$TdmParm. <- Temp..$Value\nnames( Model_$TdmParm. ) <- Temp..$Parm\nrm( Filename, Temp.. )\n\n#Base year parameters for metropolitan light vehicle DVMT, truck DVMT\n#proportions, and proportions of DVMT on freeways and arterials\nFilename <- \"mpo_base_dvmt_parm.csv\"\nMpoBaseDvmtParm..Ma <- read.csv( Filename, row.names=1 )\nModel_$MpoBaseDvmtParm..Ma <- MpoBaseDvmtParm..Ma[ Ma, ]\nrm( Filename, MpoBaseDvmtParm..Ma )\n\n#Proportions of truck and bus DVMT by functional class\nFilename <- \"truck_bus_fc_dvmt_split.csv\"\nTempInput.. <- read.csv( Filename )\nVa <- TempInput..$Value\nTruckBusFcDvmtSplit_Va.. <- split( TempInput..[,-1], Va )\nTruckBusFcDvmtSplit_Va.. <- lapply( TruckBusFcDvmtSplit_Va.., function(x) {\n  RowNames. <- x[,1]\n  Parm.. <- x[,-1]\n  rownames( Parm.. ) <- RowNames.\n  ColNames. <- colnames( Parm.. )\n  ColNames. <- gsub( \"X\", \"\", ColNames. )\n  colnames( Parm.. ) <- ColNames.\n  Parm..\n} )\nModel_$TruckBusFcDvmtSplit_Va.. <- TruckBusFcDvmtSplit_Va..\nrm( Filename, TempInput.., Va, TruckBusFcDvmtSplit_Va.. )\n\n#Average rural density by county\nFilename <- \"ave_rural_pop_density.csv\"\nTempInput.. <- read.csv( Filename )\nModel_$AveRuralDen.Co <- TempInput..$Density\nnames( Model_$AveRuralDen.Co ) <- TempInput..$County\nrm( Filename, TempInput.. )\n\n#Factor to convert metropolitan household DVMT to metropolitan light vehicle\n#road DVMT\nif( file.exists( \"LtVehDvmtFactor.Ma.RData\" ) ) {\n  Model_$LtVehDvmtFactor.Ma <- assignLoad( \"LtVehDvmtFactor.Ma.RData\" )\n} else {\n  Filename <- \"hh_dvmt_to_road_dvmt.csv\"\n  TempInput.. <- read.csv( Filename )\n  LtVehDvmtFactor.Ma <- TempInput..[,2]\n  names( LtVehDvmtFactor.Ma ) <- TempInput..[,1]\n  Model_$LtVehDvmtFactor.Ma <- LtVehDvmtFactor.Ma[ Ma ]\n  rm( Filename, TempInput.., LtVehDvmtFactor.Ma )\n}\n\n#Specify bus and rail modes\nModel_$BusModes <-  c(\"MB\", \"RB\")\nModel_$RailModes <-  c(\"SR\", \"HR\", \"CR\")\n\n#Set the working directory back to the run directory and attach the list\nsetwd( RunDir )\nattach( Model_ )\n\n#Load the policy inputs\n#======================\n#Policy inputs are stored in the scenario\\inputs folder\nsetwd( InputDir )\n\nInputs_ <- list()\n\n#Statewide real per capita income\nFilename <- \"per_cap_inc.csv\"\nTempInput.. <- read.csv( Filename )\nInputs_$PerCapInc.Yr <- TempInput..$Income\nnames( Inputs_$PerCapInc.Yr ) <- TempInput..$Year \nrm( Filename, TempInput.. )\n\n#County proportions of statewide real per capita income\nFilename <- \"county_inc_prop.csv\"\nTempInput.. <- read.csv( Filename )\ncolnames(TempInput..) <- gsub(\"X\", \"\", colnames(TempInput..))\nInputs_$IncProp.CoYr <- as.matrix( TempInput.. )[ Co, Yr ]\nrm( Filename, TempInput.. )\n\n#Metropolitan, town and rural area growth splits by county\nFilename <- \"urban_rural_growth_splits.csv\"\nTempInput.. <- read.csv( Filename, row.names=1 )\nInputs_$UrbRurGrowthSplit.CoDt <- as.matrix( TempInput.. )[ Co, Dt ]\nrm( Filename, TempInput.. )\n\n#Growth rates of UGB areas by county and type relative to population growth\n#e.g. a value of 1 means a 10% growth of area for a 10% growth in population\nFilename <- \"ugb_area_growth_rates.csv\"\nTempInput.. <- read.csv( Filename, row.names=1 )\nInputs_$UgbAreaGrowthRates.CoUt <- as.matrix( TempInput..)[ Co, Ut ]\nrm( Filename, TempInput.. )\n\n#Proportions of metropolitan areas living in urban mixed use neighborhoods\nFilename <- \"metropolitan_urban_type_proportions.csv\"\nInputs_$UrbanTypeProp.YrMa <- as.matrix( read.csv( Filename, row.names=1 ) )\nrm( Filename )\n\n#Freeway and arterial lane miles by metropolitan area and year\nFilename <- \"lane_miles.csv\"\nTempInput.. <- read.csv(Filename)\nTempInput_Yr.. <- split(TempInput.., TempInput..$Year)\nInputs_$LaneMiles_Yr.MaFc <- lapply(TempInput_Yr.., function(x) {\n  LaneMiles.MaFc <- as.matrix(x[,c(\"Fwy\", \"Art\")])\n  rownames(LaneMiles.MaFc) <- x$Msa\n  LaneMiles.MaFc[Ma,]\n})\nrm(Filename, TempInput.., TempInput_Yr..)\n\n#Transit revenue miles by mode, metropolitan area, and year\nFilename <- \"transit_service.csv\"\nTempInput.. <- read.csv(Filename)\nTempInput_Yr.. <- split(TempInput.., TempInput..$Year)\nInputs_$PTService_Yr.MaMp <- lapply(TempInput_Yr.., function(x) {\n  PTService.MaMp <- as.matrix(x[,Mp])\n  rownames(PTService.MaMp) <- x$Msa\n  PTService.MaMp[Ma,]\n})\nrm(Filename, TempInput.., TempInput_Yr..)\n\n#Carshare input parameters\nFilename <- \"carshare.csv\"\nTempInput.. <- read.csv( Filename )\nVa <- TempInput..$Value\nCarshareParm_Va.. <- split( TempInput..[,-1], Va )\nCarshareParm_Va.. <- lapply( CarshareParm_Va.., function(x) {\n  RowNames. <- x[,1]\n  Parm.. <- x[,-1]\n  rownames( Parm.. ) <- RowNames.\n  ColNames. <- colnames( Parm.. )\n  ColNames. <- gsub( \"X\", \"\", ColNames. )\n  colnames( Parm.. ) <- ColNames.\n  Parm..\n} )\nInputs_$CarshareParm_Va.. <- CarshareParm_Va..\nrm( Filename, TempInput.., Va, CarshareParm_Va.. )\n\n#Congestion pricing input parameters\nFilename <- \"congestion_charges.csv\"\nTempInput.. <- read.csv( Filename )\nVa <- TempInput..$Value\nCongPriceParm_Va.. <- split( TempInput..[,-1], Va )\nCongPriceParm_Va.. <- lapply( CongPriceParm_Va.., function(x) {\n  RowNames. <- x[,1]\n  Parm.. <- x[,-1]\n  rownames( Parm.. ) <- RowNames.\n  ColNames. <- colnames( Parm.. )\n  ColNames. <- gsub( \"X\", \"\", ColNames. )\n  colnames( Parm.. ) <- ColNames.\n  Parm..\n} )\nInputs_$CongPriceParm_Va.. <- CongPriceParm_Va..\nrm( Filename, TempInput.., Va, CongPriceParm_Va.. )\n\n# Proportion of households participating in individualized marketing program (IMP)\nFilename <- \"imp_prop_goal.csv\"\nImpPropGoal.MaYr <- as.matrix( read.csv( Filename, row.names=1 ) )\ncolnames( ImpPropGoal.MaYr ) <- gsub( \"X\", \"\", colnames( ImpPropGoal.MaYr ) )\nInputs_$ImpPropGoal.MaYr <- ImpPropGoal.MaYr\nrm( Filename, ImpPropGoal.MaYr )\n\n# Proportion of workers at employers with strong employee commute options (ECO) program\nFilename <- \"prop_wrk_eco.csv\"\nPropWrkEco.MaYr <- as.matrix( read.csv( Filename, row.names=1 ) )\ncolnames( PropWrkEco.MaYr ) <- gsub( \"X\", \"\", colnames( PropWrkEco.MaYr ) )\nInputs_$PropWrkEco.MaYr <- PropWrkEco.MaYr\nrm( Filename, PropWrkEco.MaYr )\n\n#Operations program deployment inputs\nFilename <- \"ops_deployment.csv\"\nTempInput.. <- read.csv( Filename )\nVa <- TempInput..$Value\nOpsDeployParm_Va.. <- split( TempInput..[,-1], Va )\nOpsDeployParm_Va.MaYr <- lapply( OpsDeployParm_Va.., function(x) {\n  RowNames. <- x[,1]\n  Parm.. <- x[,-1]\n  rownames( Parm.. ) <- RowNames.\n  ColNames. <- colnames( Parm.. )\n  ColNames. <- gsub( \"X\", \"\", ColNames. )\n  colnames( Parm.. ) <- ColNames.\n  Parm..\n} )\nInputs_$OpsDeployParm_Va.MaYr <- OpsDeployParm_Va.MaYr\nrm( Filename, TempInput.., Va, OpsDeployParm_Va.., OpsDeployParm_Va.MaYr )\n\n#Speed smoothing and ecodriving inputs\nFilename <- \"speed_smooth_ecodrive.csv\"\nTempInput.. <- read.csv( Filename )\nVa <- TempInput..$Value\nSmoothEcoDriveParm_Va.. <- split( TempInput..[,-1], Va )\nSmoothEcoDriveParm_Va.. <- lapply( SmoothEcoDriveParm_Va.., function(x) {\n  RowNames. <- x[,1]\n  Parm.. <- x[,-1]\n  rownames( Parm.. ) <- RowNames.\n  ColNames. <- colnames( Parm.. )\n  ColNames. <- gsub( \"X\", \"\", ColNames. )\n  colnames( Parm.. ) <- ColNames.\n  Parm..\n} )\nInputs_$SmoothEcoDriveParm_Va.. <- SmoothEcoDriveParm_Va..\nrm( Filename, TempInput.., Va, SmoothEcoDriveParm_Va.. )\n\n#Other operations deployment inputs\nFilename <- \"other_ops.csv\"\nTempInput_ <- as.list( read.csv( Filename, as.is=TRUE ) )\nTy <- TempInput_[[1]][ c(1,5,9,13) ]\nLv <- TempInput_[[2]][ 1:4 ]\nOtherOps_Yr.LvTy <- lapply( TempInput_[ 3:length( TempInput_ ) ], function(x) {\n  array( x, dim=c( length(Lv), length(Ty) ), dimnames=list( Lv, Ty ) ) } )\nnames( OtherOps_Yr.LvTy ) <- gsub( \"X\", \"\", names( OtherOps_Yr.LvTy ) )\nInputs_$OtherOps_Yr.LvTy <- OtherOps_Yr.LvTy\nrm( Filename, TempInput_, OtherOps_Yr.LvTy )                   \n\n#Eco-driving and low rolling-resistance tire inputs\nFilename <- \"eco_tire.csv\"\nTempInput.. <- read.csv( Filename, row.names=1 )\nInputs_$EcoTire..Yr <- TempInput..\nrm( Filename, TempInput.. )\n\n#Proportions of vehicles that are light trucks\nFilename <- \"lttruck_prop.csv\"\nTempInput.. <- read.csv( Filename )\nInputs_$LtTruckProp.CoYr <- TempInput..[,2:ncol(TempInput..)]\ncolnames( Inputs_$LtTruckProp.CoYr ) <- gsub(\"X\", \"\", colnames( Inputs_$LtTruckProp.CoYr ))\nrownames( Inputs_$LtTruckProp.CoYr ) <- TempInput..[,1]\nrm( Filename, TempInput.. )\n\n#Light weight vehicles input parameters\nFilename <- \"light_vehicles.csv\"\nTempInput.. <- read.csv( Filename )\nVa <- TempInput..$Value\nLtVehParm_Va.. <- split( TempInput..[,-1], Va )\nLtVehParm_Va.. <- lapply( LtVehParm_Va.., function(x) {\n  RowNames. <- x[,1]\n  Parm.. <- x[,-1]\n  rownames( Parm.. ) <- RowNames.\n  ColNames. <- colnames( Parm.. )\n  ColNames. <- gsub( \"X\", \"\", ColNames. )\n  colnames( Parm.. ) <- ColNames.\n  Parm..\n} )\nInputs_$LtVehParm_Va.. <- LtVehParm_Va..\nrm( Filename, TempInput.., Va, LtVehParm_Va.. )\n\n#Private vehicle MPG & electric power consumption (MPKwh) by vehicle year and type\nFilename <- \"auto_lighttruck_mpg.csv\"\nInputs_$AutoLtTrkMpg..Yr <- read.csv( Filename, row.names=1 )\nrm( Filename )\n\n#Proportions of households who optimize\nFilename <- \"optimize.csv\"\nTempInput.. <- read.csv( Filename )\nInputs_$OptimProp.Yr <- TempInput..$OptimProp\nnames( Inputs_$OptimProp.Yr ) <- TempInput..$Year\nrm( Filename, TempInput.. )\n\n#Load the plug in hybrid vehicle data\nFilename <- \"phev_characteristics.csv\"\nInputs_$PhevRangeProp..Yr <- read.csv( Filename, row.names=1 )\nrm( Filename )\n\n#Fuel types and carbon emissions by vehicle type\nFilename <- \"fuel_co2.csv\"\nInputs_$FuelCo2..Yr <- read.csv( Filename, row.names=1 )\nrm( Filename )\n\n#Auto and light-truck fuel type mix\nFilename <- \"auto_lighttruck_fuel.csv\"\nInputs_$AutoLtTrkFuels..Yr <- read.csv( Filename, row.names=1 )\nrm( Filename )\n\n#Carbon emissions per KWH\nFilename <- \"power_co2.csv\"\nPowerCo2.CoYr <- as.matrix( read.csv( Filename, row.names=1 ) )\ncolnames( PowerCo2.CoYr  ) <- gsub( \"X\", \"\", colnames( PowerCo2.CoYr ) )\nInputs_$PowerCo2.CoYr <- PowerCo2.CoYr\nrm( Filename, PowerCo2.CoYr )\n\n#Costs for fuel, electricity and optional VMT-based charges\nFilename <- \"costs.csv\"\nCosts..Yr <- read.csv( Filename, row.names=1 )\nCosts.YrCs <- as.matrix( Costs..Yr )\nInputs_$Costs.YrCs <- Costs.YrCs\nrm( Filename, Costs.YrCs )\n\n#PAYD input parameters\nFilename <- \"payd.csv\"\nTempInput.. <- read.csv( Filename, row.names=1 )\nInputs_$Payd..Yr <- TempInput..\nrm( Filename, TempInput.. )\n\n#Parking pricing\nFilename <- \"parking.csv\"\nTempInput.. <- read.csv( Filename )\nVa <- TempInput..$Value\nPkgParm_Va.. <- split( TempInput..[,-1], Va )\nPkgParm_Va.. <- lapply( PkgParm_Va.., function(x) {\n  RowNames. <- x[,1]\n  Parm.. <- x[,-1]\n  rownames( Parm.. ) <- RowNames.\n  ColNames. <- colnames( Parm.. )\n  ColNames. <- gsub( \"X\", \"\", ColNames. )\n  colnames( Parm.. ) <- ColNames.\n  Parm..\n} )\nInputs_$PkgParm_Va.. <- PkgParm_Va..\nrm( Filename, TempInput.., Va, PkgParm_Va.. )\n\n#Electric vehicle range and proportion of VMT in range traveled by electricity\nFilename <- \"ev_characteristics.csv\"\nInputs_$EvRangeProp..Yr <- read.csv( Filename, row.names=1 )\nrm( Filename )\n\n#Heavy vehicle MPG & power consumption by vehicle year and type:\nFilename <- \"hvy_veh_mpg_mpk.csv\"\nInputs_$HvyVehMpgMpk..Yr <- read.csv( Filename, row.names=1 )\nrm( Filename )\n\n#Factors for adjusting 95 percentile age of vehicles\nFilename <- \"age_adj.csv\"\nInputs_$AgeAdj.YrTy <- as.matrix( read.csv( Filename, row.names=1 ) )\nrm( Filename )\n\n#Congestion efficiency of vehicles by year (Yr) and powertrain (Pt)\nFilename <- \"cong_efficiency.csv\"\nInputs_$CongEfficiency.YrPt <- as.matrix( read.csv( Filename, row.names=1 ) )\nrm( Filename )\n\n#Hybrid electric vehicle characteristics\nFilename <- \"hev_characteristics.csv\"\nInputs_$HevMpgProp..Yr <- read.csv( Filename, row.names=1 )\nrm( Filename )\n\n#Heavy truck fuel type mix\nFilename <- \"heavy_truck_fuel.csv\"\nInputs_$HvyTruckFuels..Yr <- read.csv( Filename, row.names=1 )\nrm( Filename )\n\n#Bus fuel type mix, hydrocarbon by type and electric\nFilename <- \"bus_fuels.csv\"\nTempInput.. <- read.csv( Filename, as.is=TRUE )\nnames(TempInput..) <- gsub(\"X\", \"\", names(TempInput..))\n#Create matrix of electric proportion by metropolitan area and year\nBusPropElectric.. <- TempInput..[grep(\"PropElectric\", TempInput..$Fuel), -2]\nBusPropElectric.MaYr <- as.matrix(BusPropElectric..[,-1])\ndimnames(BusPropElectric.MaYr) <- list(BusPropElectric..$Area, names(BusPropElectric..)[-1])  \nInputs_$BusPropElectric.MaYr <- BusPropElectric.MaYr[Ma, ]\n#Create an array of hydrocarbon fuel proportions by fuel, year and metropolitan area\nTempInput.. <- TempInput..[-grep(\"PropElectric\", TempInput..$Fuel), ]\nTempInput_ <- split( TempInput.., TempInput..[,1] )\nFp <- c( \"PropGas\", \"PropCng\", \"DieselPropBio\", \"GasPropEth\" )\nBusFuels.FpYrMa <- array( 0, dim=c( length( Fp ), length( Yr ), length( Ma ) ),\n                          dimnames=list( Fp, Yr, Ma ) )\nfor( ma in Ma ) {\n  DataIn.. <- TempInput_[[ma]]\n  DataOut.. <- DataIn..[ , 3:ncol( DataIn.. ) ]\n  colnames( DataOut.. ) <- gsub( \"X\", \"\", colnames( DataOut.. ) )\n  rownames( DataOut.. ) <- DataIn..[ , 2 ]\n  BusFuels.FpYrMa[ , , ma ] <- as.matrix( DataOut.. )[ Fp, Yr ]\n  rm( DataIn.., DataOut.. )\n}\nInputs_$BusFuels.FpYrMa <- BusFuels.FpYrMa\nrm( Filename, BusPropElectric.., BusPropElectric.MaYr, TempInput.., TempInput_, BusFuels.FpYrMa, ma, Fp )\n\n#Commercial service vehicle light truck proportions\nFilename <- \"comm_service_lttruck_prop.csv\"\nTempInput.. <- read.csv( Filename, as.is=TRUE )\nCommServiceLtTruckProp.Yr <- TempInput..$LtTruckProp\nnames( CommServiceLtTruckProp.Yr ) <- TempInput..$Year\nInputs_$CommServiceLtTruckProp.Yr <- CommServiceLtTruckProp.Yr\nrm( Filename, TempInput.., CommServiceLtTruckProp.Yr )\n\n#Commercial service vehicle fuels\nFilename <- \"comm_service_fuel.csv\"\nInputs_$CommServiceFuels..Yr <- read.csv( Filename, row.names=1 )\nrm( Filename )\n\n#Commercial service vehicle EV VMT proportions\nFilename <- \"comm_service_pt_prop.csv\"\nInputs_$CommServicePtProp..Yr <- read.csv( Filename, row.names=1 )\nrm( Filename )\n\nsetwd( RunDir )\n\nattach( Inputs_ )\n\n",
    "created" : 1480367706618.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2088159530",
    "id" : "34FBC590",
    "lastKnownWriteTime" : 1507325598,
    "last_content_update" : 1507325598,
    "path" : "~/GitHub/GreenSTEP/Version_3.6/Example/scripts/GreenSTEP_Inputs.r",
    "project_path" : "scripts/GreenSTEP_Inputs.r",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}