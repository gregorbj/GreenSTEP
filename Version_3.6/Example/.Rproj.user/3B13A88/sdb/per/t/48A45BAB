{
    "collab_server" : "",
    "contents" : "#===============\n#GreenSTEP_Sim.r\n#===============\n#Copyright 2009 - 2016, Oregon Department of Transportation \n#Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\n#this file except in compliance with the License. You may obtain a copy of the\n#License at http://www.apache.org/licenses/LICENSE-2.0 \n#Unless required by applicable law or agreed to in writing, software distributed\n#under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n#CONDITIONS OF ANY KIND, either express or implied.  See the License for the\n#specific language governing permissions and limitations under the License.\n#Version: 3.6.1 \n#Date: 8/15/17\n\n#Description\n#===========\n#This module performs all of the household microsimulation calculations for\n#determining household income, vehicle ownership, household travel and vehicle\n#characteristics and use. The results are aggregated to arrays by county, income\n#and development type and saved to disk.\n\n#This version incorporates the alternative modes trip models from the RSPM V3.6.\n#It also changes the way that lane-miles and transit revenue miles are\n#calculated. For lane-mile calculations, rather than calculating lane-miles from\n#base-year values and model year growth rates, the lane-mile values are input by\n#year. The same approach is taken for transit revenue miles. In another\n#change for calculating transit revenue miles, the revenue miles are input for\n#8 transit modes. These are multiplied by bus-equivalency factors to compute\n#bus-equivalent revenue miles. Those bus-equivalent revenue miles are used to\n#compute transit revenue miles per capita.\n\n#===================================\n#SET UP AND PRELIMINARY CALCULATIONS\n#===================================\n\n# Make a scenario outputs directory\nif(!file.exists(OutputDir)) {\n  dir.create(OutputDir)\n}\n# Make a vector of years that are past years (base year and before )\nPastYears. <-\n  as.character(as.numeric(Yr)[as.numeric(Yr) <= as.numeric(BaseYear)])\n\n#Calculate Roadway Construction Costs\n#------------------------------------\n#In order to annualize the estimate of roadway construction costs (i.e. the cost\n#of adding lane miles), it is necessary to calculate using all years for which\n#there are input data, not just the run years. To do the calculations, the\n#metropolitan area population needs to be estimated because freeway and arterial\n#lane miles are specified in per capita terms. The metropolitan population\n#estimates will not exactly equal the estimates calculated in later steps below\n#because of stochastic effects. The difference will be very small and the effect\n#on the calculation of annual cost will be very small.\n\n#Initialize arrays\nPop.CoYr <- array(0, dim=c(length(Co), length(Yr)), dimnames=list(Co, Yr))\n#Iterate by year and tabulate total population by county\nfor( yr in Yr ) {\n  #Load the population data\n  PopDir <- paste0(ModelDir, \"/pop_forecasts\")\n  Pop.. <- read.csv(paste0(PopDir, \"/pop_by_age_\", yr, \".csv\"), row.names=1)\n  Pop.CoYr[,yr] <- rowSums(Pop..)[Co]\n}\nrm(PopDir, Pop.., yr)\n#Estimate the metropolitan area population of each county\nMetroPop.CoYr <- Pop.CoYr * 0\nfor (yr in Yr) {\n  if (yr %in% PastYears.) {\n    MetroPop.CoYr[, yr] <-\n      UrbRurPopProp.CoDt[, \"Metropolitan\"] * Pop.CoYr[, yr]\n  } else {\n    BasePop.Co <-  Pop.CoYr[, BaseYear]\n    PopGrowth.Co <- Pop.CoYr[, yr] - BasePop.Co\n    MetroPop.CoYr[, yr] <-\n      UrbRurGrowthSplit.CoDt[, \"Metropolitan\"] * PopGrowth.Co +\n      UrbRurPopProp.CoDt[, \"Metropolitan\"] * BasePop.Co\n  }\n}\nMetroPop.MaYr <-\n  apply(MetroPop.CoYr, 2, function(x)\n    tapply(x, CountyGroups..$Msa, sum))[Ma, Yr]\nrm(Pop.CoYr, MetroPop.CoYr, BasePop.Co, PopGrowth.Co, yr)\n#Calculate the annual metropolitan freeway construction cost for added\n#lane-miles per year\nFwyLnMi.Yr <- \n  unlist(lapply(LaneMiles_Yr.MaFc, function(x) {\n    sum(x[,\"Fwy\"])\n  }))\nFwyLnMiChg.Yx <- diff(FwyLnMi.Yr)\nNumYear.Yx <- diff(as.numeric(names(FwyLnMi.Yr)))\nFwyLnMiAnnualCosts.Yr <- FwyLnMi.Yr * 0\nFwyLnMiAnnualCosts.Yr[names(FwyLnMiChg.Yx)] <-\n  (FwyLnMiChg.Yx / NumYear.Yx) * 1000 * Costs.YrCs[names(FwyLnMiChg.Yx), \"FwyLnMi\"]\nFwyLnMiAnnualCosts.Yr[1] <- FwyLnMiAnnualCosts.Yr[2]\nrm(FwyLnMi.Yr, FwyLnMiChg.Yx, NumYear.Yx)\n#Calculate the annual metropolitan arterial construction cost for added \n#lane-miles per year\nArtLnMi.Yr <- \n  unlist(lapply(LaneMiles_Yr.MaFc, function(x) {\n    sum(x[,\"Art\"])\n  }))\nArtLnMiChg.Yx <- diff(ArtLnMi.Yr)\nNumYear.Yx <- diff(as.numeric(names(ArtLnMi.Yr)))\nArtLnMiAnnualCosts.Yr <- ArtLnMi.Yr * 0\nArtLnMiAnnualCosts.Yr[names(ArtLnMiChg.Yx)] <-\n  (ArtLnMiChg.Yx / NumYear.Yx) * 1000 * Costs.YrCs[names(ArtLnMiChg.Yx), \"ArtLnMi\"]\nArtLnMiAnnualCosts.Yr[1] <- ArtLnMiAnnualCosts.Yr[2]\nrm(ArtLnMi.Yr, ArtLnMiChg.Yx, NumYear.Yx)\n#Calculate the total annual cost for adding lane miles\nAnnLnMiAddCosts.Yr <- FwyLnMiAnnualCosts.Yr + ArtLnMiAnnualCosts.Yr\nrm(FwyLnMiAnnualCosts.Yr, ArtLnMiAnnualCosts.Yr)\n\n\n#====================================================================\n#RUN THE MODEL FOR EACH RUN YEAR SPECIFIED IN THE RUN PARAMETERS FILE\n#====================================================================\n\n#The model iterates through each forecast year. The results for the year are stored in a list with a component for each year.\n\nfor (yr in RunYears) {\n\n  #Set a random seed to make run replicable \n  #---------------------------------------- If the UsedSavedRandomSeed input\n  #parameter is TRUE a saved random seed will be retrieved Otherwise a new\n  #random seed will be set and saved\n  RandomSeedFile <-\n    paste(InputDir, \"/RandomSeedValue\", yr, \".RData\", sep = \"\")\n  if (UseSavedRandomSeed & file.exists(RandomSeedFile)) {\n    RandomSeedValue <- assignLoad(RandomSeedFile)\n  } else {\n    RandomSeedValue <- sample(1:1000000, 1)\n    save(RandomSeedValue, file = RandomSeedFile)\n  }\n  #Set random seed for model run\n  set.seed(RandomSeedValue)\n  \n  #Print run year to console\n  print(yr)\n  #Save start time for year iteration\n  OverallStart <- Sys.time()\n  \n  #Set up directories\n  #------------------\n  SynPopYearDir <- paste0(ModelDir, \"/SynHsld/Year\", yr)\n  OutputYearDir <- paste0(OutputDir, \"/Year\", yr)\n  if (!file.exists(OutputYearDir))\n    dir.create(OutputYearDir)\n  OutputBaseYearDir <- paste0(OutputDir, \"/Year\", BaseYear)\n  \n  \n  #============================================================================\n  #STEP 1: ADD LAND USE AND TRANSPORTATION SYSTEM CHARACTERISTICS TO HOUSEHOLDS\n  #============================================================================\n  \n  #Step 1a: Model income and land use attributes\n  #=============================================\n  \n  #Load files\n  load(paste0(SynPopYearDir, \"/Hsld_Co.HhAp.RData\"))\n  \n  #Make matrices to store population sums and income sums by county and\n  #development type\n  Pop.CoDt <-\n    array(0,\n          dim = c(length(Co), length(Dt)),\n          dimnames = list(Co, Dt))\n  Inc.CoDt <-\n    array(0,\n          dim = c(length(Co), length(Dt)),\n          dimnames = list(Co, Dt))\n  \n  #Iterate through counties and add attributes\n  for (co in Co) {\n    print(co)\n    \n    #Wrap inside a local function to reduce potential for naming conflicts\n    local({\n      #Extract the synthetic population for the county\n      SynPop.. <- data.frame(Hsld_Co.HhAp[[co]])\n      \n      # Give each household a unique id\n      SynPop..$Houseid <- 1:nrow(SynPop..)\n      \n      #Calculate the household size\n      SynPop..$Hhsize <- rowSums(SynPop..[, Ap])\n      \n      #Predict household income\n      PerCapInc <- PerCapInc.Yr[yr] * IncProp.CoYr[co, yr]\n      Inc_ <- predictIncome(\n        Data.. = SynPop..[,Ap],\n        Model = IncModel_$Formula,\n        Dispersion = IncModel_$Dispersion,\n        Pow = IncModel_$Pow,\n        AreaInc = PerCapInc,\n        MatchInc = TRUE,\n        MaxIter = 50,\n        IncConverge = 0.001\n      )\n      SynPop..$Hhincttl <- Inc_$PredInc\n      SynPop..$Hhincttl[SynPop..$Hhincttl <= 0] <- 1\n      MinInc <- quantile(SynPop..$Hhincttl, prob = 0.01)\n      SynPop..$Hhincttl[SynPop..$Hhincttl < MinInc] <- MinInc\n      \n      #Classify households according to income group\n      MaxInc <- max(SynPop..$Hhincttl)\n      IncBreaks. <-\n        c(0, 20000, 40000, 60000, 80000, 100000, MaxInc)\n      SynPop..$IncGrp <-\n        cut(\n          SynPop..$Hhincttl,\n          breaks = IncBreaks.,\n          labels = Ig,\n          include.lowest = TRUE\n        )\n      \n      #Calculate total population and households\n      Pop <- sum(colSums(SynPop..[, 1:6]))\n      Hhslds <- nrow(SynPop..)\n      \n      #Calculate the urban rural household proportions\n      #Assume the household proportions are the same as the population\n      #proportions\n      if (yr %in% PastYears.) {\n        UrbRurHhProp.Dt <- UrbRurPopProp.CoDt[co, ]\n      } else {\n        PopGrowth <- Pop - sum(BasePop.CoDt[co,])\n        PopGrowth.Dt <- PopGrowth * UrbRurGrowthSplit.CoDt[co,]\n        UrbRurPop.Dt <- BasePop.CoDt[co,] + PopGrowth.Dt\n        UrbRurHhProp.Dt <- UrbRurPop.Dt / sum(UrbRurPop.Dt)\n      }\n      \n      #Assign development types to households\n      SynPop..$DevType <-\n        sample(Dt, Hhslds, replace = TRUE, prob = UrbRurHhProp.Dt)\n      \n      #Calculate population by development type and save\n      UrbRurPop.Dt <- rep(0, length(Dt))\n      names(UrbRurPop.Dt) <- Dt\n      UrbRurPop.Dx <-\n        tapply(SynPop..$Hhsize, SynPop..$DevType, sum)\n      UrbRurPop.Dt[names(UrbRurPop.Dx)] <- UrbRurPop.Dx\n      Pop.CoDt[co,] <<- UrbRurPop.Dt\n      \n      #Recalculate the population growth by development type because the \n      #assumption that household proportions are the same as population \n      #proportions and the household sampling process changes the population\n      #growth proportions from inputs\n      if (!(yr %in% PastYears.)) {\n        PopGrowth.Dt <- UrbRurPop.Dt - BasePop.CoDt[co,]\n      }\n      \n      #Calculate the urban growth boundary area\n      UgbAreas.Ut <- BaseUgbAreas.CoUt[co,]\n      if (!(yr %in% PastYears.)) {\n        PopGrowthRate.Dt <- PopGrowth.Dt / BasePop.CoDt[co,]\n        UgbAreas.Ut <-\n          (1 + PopGrowthRate.Dt[Ut] * UgbAreaGrowthRates.CoUt[co, ]) *\n          UgbAreas.Ut\n      }\n      \n      # Calculate urban density\n      HasMetro <- UrbRurPop.Dt[\"Metropolitan\"] != 0\n      TownDen <- UrbRurPop.Dt[\"Town\"] / UgbAreas.Ut[\"Town\"]\n      if (HasMetro) {\n        MetroDen <-\n          UrbRurPop.Dt[\"Metropolitan\"] / UgbAreas.Ut[\"Metropolitan\"]\n      }\n      \n      #Calculate density distribution for metropolitan areas\n      if (HasMetro) {\n        ma <- CountyGroups..[co, \"Msa\"]\n        UrbProp <- UrbanTypeProp.YrMa[yr, ma]\n        DenUrbResults_ <-\n          predictDensityUrban(MetroDen, UbzDenModel_, UrbProp = UrbProp)\n      }\n      \n      #Calculate average rural density\n      AveRuralDen <- AveRuralDen.Co[co]\n      if (as.numeric(yr) > 2005) {\n        if (PopGrowth.Dt[\"Rural\"] > 0) {\n          RuralPop <- UrbRurPop.Dt[\"Rural\"]\n          BaseRuralPop <- BasePop.CoDt[co, \"Rural\"]\n          RuralPopGrowth <- PopGrowth.Dt[\"Rural\"]\n          AveRuralDen <- (AveRuralDen * BaseRuralPop / RuralPop) +\n            (120 * RuralPopGrowth / RuralPop)\n        }\n      }\n      \n      #Assign density and urban values to households\n      Den. <- Urb. <- numeric(nrow(SynPop..))\n      Den.[SynPop..$DevType == \"Town\"] <- TownDen\n      Den.[SynPop..$DevType == \"Rural\"] <- AveRuralDen\n      if (HasMetro) {\n        NumMetroHh <- sum(SynPop..$DevType == \"Metropolitan\")\n        MetroDen. <- sample(\n          DenUrbResults_$DenValues.,\n          NumMetroHh,\n          replace = TRUE,\n          prob = DenUrbResults_$DenProbs.\n        )\n        Den.[SynPop..$DevType == \"Metropolitan\"] <- MetroDen.\n        UrbProb. <- DenUrbResults_$UrbanProbs.[match(MetroDen.,\n                                                     DenUrbResults_$DenValues.)]\n        MetroUrb. <- sapply(UrbProb., function(x) {\n          sample(c(1, 0), 1, prob = c(x, 1 - x))\n        })\n        Urb.[SynPop..$DevType == \"Metropolitan\"] <- MetroUrb.\n      }\n      SynPop..$Htppopdn <- Den.\n      SynPop..$Urban <- Urb.\n      \n      #Calculate the natural log of density\n      SynPop..$LogDen <- log(SynPop..$Htppopdn)\n      \n      #Calculate driving age population\n      SynPop..$DrvAgePop <- rowSums(SynPop..[, Ap[-1]])\n      \n      #Create a variable identifying driver population levels\n      DrvLevels. <- c(0, 1, 2, max(SynPop..$DrvAgePop))\n      SynPop..$DrvLevels <-\n        as.character(cut(\n          SynPop..$DrvAgePop,\n          breaks = DrvLevels.,\n          labels = c(\"Drv1\", \"Drv2\", \"Drv3Plus\")\n        ))\n      \n      #Identify households having only elderly persons\n      SynPop..$OnlyElderly <-\n        as.numeric(SynPop..$DrvAgePop == SynPop..$Age65Plus)\n      \n      #Sum income by development type\n      Inc.Dt <- tapply(SynPop..$Hhincttl, SynPop..$DevType, sum)\n      Inc.CoDt[co, names(Inc.Dt)] <<- Inc.Dt\n      \n      #Save the synthetic population for the county\n      Filename <- paste(OutputYearDir, \"/\", co, \".RData\", sep = \"\")\n      save(SynPop.., file = Filename)\n      \n      #Exit local function\n    })\n    \n    #End for loop through counties\n  }\n  \n  #Save the population and income tabulations\n  save(Pop.CoDt, file = paste0(OutputYearDir, \"/Pop.CoDt.RData\"))\n  save(Inc.CoDt, file = paste0(OutputYearDir, \"/Inc.CoDt.RData\"))\n  \n  if (yr != BaseYear) {\n    BasePop.CoDt <-\n      assignLoad(paste0(OutputBaseYearDir, \"/Pop.CoDt.RData\"))\n    BaseInc.CoDt <-\n      assignLoad(paste0(OutputBaseYearDir, \"/Inc.CoDt.RData\"))\n  } else {\n    BasePop.CoDt <- Pop.CoDt\n    BaseInc.CoDt <- Inc.CoDt\n  }\n  \n  #Step 1b: Calculate freeway, arterial and transit supply by metropolitan area\n  #============================================================================\n  \n  #Log start of procedure\n  StartTime <- Sys.time()\n  print(\"Calculating freeway and transit supply\")\n  \n  #Wrap in local function to reduce clutter and potential for conflict in global\n  #environment\n  local({\n    # Initialize objects to store results\n    FwyLnMiCap.Ma <- numeric(length(Ma))\n    names(FwyLnMiCap.Ma) <- Ma\n    ArtLnMiCap.Ma <- numeric(length(Ma))\n    names(ArtLnMiCap.Ma) <- Ma\n    FwyLnMi.Ma <- numeric(length(Ma))\n    names(FwyLnMi.Ma) <- Ma\n    ArtLnMi.Ma <- numeric(length(Ma))\n    names(ArtLnMi.Ma) <- Ma\n    TranRevMiCap.Ma <- numeric(length(Ma))\n    names(TranRevMiCap.Ma) <- Ma\n    BusRevMi.Ma <- numeric(length(Ma))\n    names(BusRevMi.Ma) <- Ma\n    RailRevMi.Ma <- numeric(length(Ma))\n    names(RailRevMi.Ma) <- Ma\n    \n    #Iterate through metropolitan areas and do the calculations\n    for (ma in Ma) {\n      #Select the counties in the metropolitan area\n      Mc <- rownames(CountyGroups..)[CountyGroups..$Msa %in% ma]\n      \n      #Calculate the metropolitan population\n      MetroPop <- sum(BasePop.CoDt[Mc, \"Metropolitan\"])\n      \n      #Calculate per capita freeway lane miles\n      FwyLnMi.Ma[ma] <- LaneMiles_Yr.MaFc[[yr]][ma, \"Fwy\"]\n      FwyLnMiCap.Ma[ma] <- 1000 * FwyLnMi.Ma[ma] / MetroPop\n\n      #Calculate per capita arterial lane miles\n      ArtLnMi.Ma[ma] <- LaneMiles_Yr.MaFc[[yr]][ma, \"Art\"]\n      ArtLnMiCap.Ma[ma] <- 1000 * ArtLnMi.Ma[ma] / MetroPop\n\n      # Calculate rail and transit servie and bus-equivalent per capita \n      # transit revenue miles\n      BusRevMi.Ma[ma] <- sum(PTService_Yr.MaMp[[yr]][ma, BusModes])\n      RailRevMi.Ma[ma] <- sum(PTService_Yr.MaMp[[yr]][ma, RailModes])\n      BusEqService.Mp <- \n        PTService_Yr.MaMp[[yr]][ma, Mp] * RevMiFactors[Mp]\n      TranRevMiCap.Ma[ma] <- sum(BusEqService.Mp) / MetroPop\n      \n    # Assign results to the global environment\n    FwyLnMiCap.Ma <<- FwyLnMiCap.Ma\n    ArtLnMiCap.Ma <<- ArtLnMiCap.Ma\n    FwyLnMi.Ma <<- FwyLnMi.Ma\n    ArtLnMi.Ma <<- ArtLnMi.Ma\n    TranRevMiCap.Ma <<- TranRevMiCap.Ma\n    BusRevMi.Ma <<- BusRevMi.Ma\n    RailRevMi.Ma <<- RailRevMi.Ma\n    \n  }\n  })\n  \n  # Save the results\n  #-----------------\n  Filename <- paste(OutputYearDir, \"/FwyLnMiCap.Ma.RData\", sep = \"\")\n  save(FwyLnMiCap.Ma, file = Filename)\n  rm(Filename)\n  Filename <- paste(OutputYearDir, \"/ArtLnMiCap.Ma.RData\", sep = \"\")\n  save(ArtLnMiCap.Ma, file = Filename)\n  rm(Filename)\n  Filename <-\n    paste(OutputYearDir, \"/TranRevMiCap.Ma.RData\", sep = \"\")\n  save(TranRevMiCap.Ma, file = Filename)\n  rm(Filename)\n  Filename <- paste(OutputYearDir, \"/BusRevMi.Ma.RData\", sep = \"\")\n  save(BusRevMi.Ma, file = Filename)\n  rm(Filename)\n  Filename <- paste(OutputYearDir, \"/RailRevMi.Ma.RData\", sep = \"\")\n  save(RailRevMi.Ma, file = Filename)\n  rm(Filename)\n  \n  #Report end of procedure\n  print(StartTime)\n  print(Sys.time())\n  \n  #Step 1c: Add the freeway and transit supply data to the SynPop..\n  #================================================================\n  \n  #Log start of procedure\n  StartTime <- Sys.time()\n  print(\"Adding freeway and transit supply to synthetic households\")\n  \n  for (co in Co) {\n    print(co)\n    \n    local({\n      # Load county file\n      Filename <- paste(OutputYearDir, \"/\", co, \".RData\", sep = \"\")\n      SynPop.. <- assignLoad(Filename)\n      \n      # Make calculations\n      SynPop..$Fwylnmicap <- 0\n      SynPop..$Fwylnmicap[SynPop..$DevType == \"Metropolitan\"] <-\n        FwyLnMiCap.Ma[CountyGroups..[co, \"Msa\"]]\n      SynPop..$Tranmilescap <- 0\n      SynPop..$Tranmilescap[SynPop..$DevType == \"Metropolitan\"] <-\n        TranRevMiCap.Ma[CountyGroups..[co, \"Msa\"]]\n      \n      # Save results\n      Filename <- paste(OutputYearDir, \"/\", co, \".RData\", sep = \"\")\n      save(SynPop.., file = Filename, compress = TRUE)\n      \n      rm(SynPop..)\n      gc()\n      \n    })\n    \n  }\n  \n  #Report end of procedure\n  print(StartTime)\n  print(Sys.time())\n  \n  \n  #=================================================================\n  #STEP 2: SIMULATE HOUSEHOLD TRAVEL CHARACTERISTICS FOR EACH COUNTY\n  #=================================================================\n  \n  #Log start of procedure\n  StartTime <- Sys.time()\n  print(\"Simulation of household travel characteristics\")\n  \n  #Iterate through counties\n  #========================\n  \n  for (co in Co) {\n    #Report county\n    print(co)\n    \n    # Load county file\n    Filename <- paste(OutputYearDir, \"/\", co, \".RData\", sep = \"\")\n    SynPop.. <- assignLoad(Filename)\n    \n    # Identify metropolitan area\n    MetroArea <- CountyGroups..[co, \"Msa\"]\n    IsMetro. <- SynPop..$DevType == \"Metropolitan\"\n    \n    #Step 2a: Identify households affected by travel demand management or\n    #vehicle o&m programs\n    #=====================================================================\n    \n    #Identify ECO and IMP households\n    #-------------------------------\n    SynPop..$NumEco <- 0\n    ModelVar. <- c(\"DrvAgePop\", \"Houseid\")\n    if (any(IsMetro.)) {\n      SynPop..$NumEco[IsMetro.] <-\n        idEcoWorkers(SynPop..[IsMetro., ModelVar.],\n                     PropWrkEco = PropWrkEco.MaYr[MetroArea, yr])\n    }\n    rm(ModelVar.)\n    SynPop..$ImpHh <- 0\n    ModelVar. <- c(\"Htppopdn\", \"Urban\", \"Houseid\")\n    if (any(IsMetro.)) {\n      ImpHh_ <- idImpHouseholds(SynPop..[IsMetro., ModelVar.],\n                                ImpPropGoal = ImpPropGoal.MaYr[MetroArea, yr])\n      SynPop..$ImpHh[IsMetro.] <- ImpHh_$ImpHh\n      rm(ImpHh_)\n    }\n    rm(ModelVar.)\n    \n    #Identify eco-driver and low rolling-resistance tire households\n    #--------------------------------------------------------------\n    # Note: reason for form of 1st argument is to pass a data frame with\n    # minimal size to the functions.\n    ModelVar. <- \"Houseid\"\n    TempInputData.. <- data.frame(SynPop..[, \"Houseid\"])\n    SynPop..$IsEcoDriver <- idEcoDriverHh(TempInputData..,\n                                          EcoTire..Yr[yr, \"EcoDrvProp\"])\n    SynPop..$IsLowRollTire <- idLowRollTire(TempInputData..,\n                                            EcoTire..Yr[yr, \"LowRollProp\"])\n    rm(ModelVar., TempInputData..)\n    \n    #Step 2b: Calculate vehicle ownership and adjust for carsharing\n    #==============================================================\n    \n    #Calculate initial vehicle ownership\n    #-----------------------------------\n    #Initialize Hhvehcnt and VehPerDrvAgePop variables\n    SynPop..$Hhvehcnt <- 0\n    SynPop..$VehPerDrvAgePop <- 0\n    # Predict ownership for metropolitan households if any exist\n    if (any(IsMetro.)) {\n      ModelVar. <- c(\n        \"Hhincttl\",\n        \"Htppopdn\",\n        \"Tranmilescap\",\n        \"Urban\",\n        \"Fwylnmicap\",\n        \"OnlyElderly\",\n        \"DrvLevels\",\n        \"DrvAgePop\"\n      )\n      MetroVehOwn_ <-\n        predictVehOwn(SynPop..[IsMetro., ModelVar.],\n                      Model_ = VehicleOwnModels_, Type =\n                        \"Metro\")\n      rm(ModelVar.)\n    }\n    #Predict ownership for nonmetropolitan households if any exist\n    if (any(!IsMetro.)) {\n      ModelVar. <-\n        c(\"Hhincttl\",\n          \"Htppopdn\",\n          \"OnlyElderly\",\n          \"DrvLevels\",\n          \"DrvAgePop\")\n      NonMetroVehOwn_ <-\n        predictVehOwn(SynPop..[!IsMetro., ModelVar.],\n                      Model_ = VehicleOwnModels_, Type =\n                        \"NonMetro\")\n      rm(ModelVar.)\n    }\n    #Assign values to SynPop.. and return the result\n    if (any(IsMetro.)) {\n      SynPop..$Hhvehcnt[IsMetro.] <- MetroVehOwn_$NumVeh\n      SynPop..$VehPerDrvAgePop[IsMetro.] <- MetroVehOwn_$VehRatio\n    }\n    if (any(!IsMetro.)) {\n      SynPop..$Hhvehcnt[!IsMetro.] <- NonMetroVehOwn_$NumVeh\n      SynPop..$VehPerDrvAgePop[!IsMetro.] <-\n        NonMetroVehOwn_$VehRatio\n    }\n    #Clean up\n    if (exists(\"MetroVehOwn_\"))\n      rm(MetroVehOwn_)\n    if (exists(\"NonMetroVehOwn_\"))\n      rm(NonMetroVehOwn_)\n    \n    # Identify carshare households\n    #-----------------------------\n    SynPop..$Carshare <- 0\n    ModelVar. <-\n      c(\"Hhvehcnt\", \"Hhsize\", \"Age65Plus\", \"Htppopdn\", \"Houseid\")\n    if (any(IsMetro.)) {\n      SynPop..$Carshare[IsMetro.] <-\n        idCarshareHh(\n          SynPop..[IsMetro., ModelVar.],\n          CarshareRates. = c(\n            MedDen = CarshareParm_Va..$MedDenRate[MetroArea, yr],\n            HighDen =\n              CarshareParm_Va..$HighDenRate[MetroArea, yr]\n          )\n        )\n    }\n    rm(ModelVar.)\n    \n    #Adjust vehicle ownership to account for carsharing\n    #--------------------------------------------------\n    if (any(IsMetro.)) {\n      SynPop.. <-\n        adjCarshareOwn(\n          SynPop..,\n          OneCarProb. = c(C0 = 0.66, C1 = 0.34),\n          TwoCarProb. = c(C0 = 0.17, C1 = 0.56, C2 =\n                            0.27),\n          ThreeCarProb. = c(\n            C0 = 0.15,\n            C1 = 0.21,\n            C2 = 0.22,\n            C3 = 0.42\n          )\n        )\n    }\n    \n    #Step 2c: 1st DVMT calculation (no adjustment for costs)\n    #=======================================================\n    \n    #Calculate the average DVMT\n    #--------------------------\n    ModelVar. <-\n      c(\n        \"Hhincttl\",\n        \"Htppopdn\",\n        \"Hhvehcnt\",\n        \"Tranmilescap\",\n        \"Fwylnmicap\",\n        \"DrvAgePop\",\n        \"Hhsize\",\n        \"Age0to14\",\n        \"Age15to19\",\n        \"Age20to29\",\n        \"Age30to54\",\n        \"Age55to64\",\n        \"Age65Plus\",\n        \"Urban\",\n        \"BaseCostPerMi\",\n        \"FutrCostPerMi\"\n      )\n    #Assume a base and future cost of 4 cents per mile\n    #so that budget constraints don't impinge on the amount of vehicle travel\n    SynPop..$BaseCostPerMi <- 4 / 100\n    SynPop..$FutrCostPerMi <- 4 / 100\n    SynPop..$Dvmt <- 0\n    if (any(IsMetro.)) {\n      SynPop..$Dvmt[IsMetro.] <-\n        calcAdjAveDvmt(\n          SynPop..[IsMetro., ModelVar.],\n          DvmtLmModels_,\n          \"Metro\",\n          BudgetProp = BudgetProp,\n          AnnVmtInflator = AnnVmtInflator,\n          TrnstnProp = 1\n        )[[1]]\n    }\n    if (any(!IsMetro.)) {\n      SynPop..$Dvmt[!IsMetro.] <-\n        calcAdjAveDvmt(\n          SynPop..[!IsMetro., ModelVar.],\n          DvmtLmModels_,\n          \"NonMetro\",\n          BudgetProp = BudgetProp,\n          AnnVmtInflator = AnnVmtInflator,\n          TrnstnProp = 1\n        )[[1]]\n    }\n    \n    #Step 2d: Calculate non-price TDM and light-weight vehicle DVMT adjustment\n    #factors\n    #=========================================================================\n    \n    #Calculate the TDM adjustment factor\n    #-----------------------------------\n    TdmAdjDvmt.Hh <- SynPop..$Dvmt\n    ModelVar. <- c(\"Dvmt\", \"NumEco\", \"ImpHh\")\n    if (any(IsMetro.)) {\n      TdmAdjDvmt.Hh[IsMetro.] <-\n        adjDvmtEcoImp(SynPop..[IsMetro., ModelVar.],\n                      EcoReduction = TdmParm.[\"EcoReduction\"],\n                      ImpReduction = TdmParm.[\"ImpReduction\"])\n    }\n    TdmAdjFactor.Hh <- TdmAdjDvmt.Hh / SynPop..$Dvmt\n    TdmAdjFactor.Hh[SynPop..$Dvmt == 0] <- 1\n    \n    #Calculate the light vehicle adjustment factor\n    #---------------------------------------------\n    # Predict light vehicle ownership\n    LtVehOwn.Hh <- rep(0, nrow(SynPop..))\n    SynPop..$LogDen <- log(SynPop..$Htppopdn)\n    ModelVar. <-\n      c(\n        \"LogDen\",\n        \"Hhsize\",\n        \"Hhincttl\",\n        \"Age15to19\",\n        \"Age20to29\",\n        \"Age30to54\",\n        \"Age55to64\",\n        \"Age65Plus\",\n        \"VehPerDrvAgePop\",\n        \"DrvAgePop\"\n      )\n    if (any(IsMetro.)) {\n      LtVehOwn.Hh[IsMetro.] <-\n        predictLightVehicles(\n          SynPop..[IsMetro., ModelVar.],\n          LtVehOwnModels_ =\n            LtVehOwnModels_,\n          Type = \"Metro\",\n          TargetProp = LtVehParm_Va..$TargetProp[MetroArea, yr]\n        )\n    }\n    if (any(!IsMetro.)) {\n      LtVehOwn.Hh[!IsMetro.] <-\n        predictLightVehicles(\n          SynPop..[!IsMetro., ModelVar.],\n          LtVehOwnModels_ =\n            LtVehOwnModels_,\n          Type = \"NonMetro\",\n          TargetProp = LtVehParm_Va..$TargetProp[\"NonMetro\", yr]\n        )\n    }\n    SynPop..$LtVehCnt <- LtVehOwn.Hh\n    rm(LtVehOwn.Hh, ModelVar.)\n    SynPop..$LogDen <- NULL\n    \n    #Predict light vehicle DVMT\n    #--------------------------\n    LtVehDvmt.Hh <- SynPop..$Dvmt\n    SynPop..$LogDen <- log(SynPop..$Htppopdn)\n    SynPop..$LogSize <- log(SynPop..$Hhsize)\n    SynPop..$LogDvmt <- log(SynPop..$Dvmt)\n    ModelVar. <-\n      c(\n        \"Hhincttl\",\n        \"LogDen\",\n        \"LogSize\",\n        \"Urban\",\n        \"LogDvmt\",\n        \"Dvmt\",\n        \"LtVehCnt\",\n        \"DrvAgePop\"\n      )\n    if (any(IsMetro.)) {\n      LtVehDvmt.Hh[IsMetro.] <-\n        calcLtVehDvmt(\n          SynPop..[IsMetro., ModelVar.],\n          AveSovPropModels_,\n          Threshold = LtVehParm_Va..$Threshold[MetroArea, yr],\n          PropSuitable = LtVehParm_Va..$PropSuitable[MetroArea, yr],\n          Sharing = FALSE\n        )\n    }\n    if (any(!IsMetro.)) {\n      LtVehDvmt.Hh[!IsMetro.] <-\n        calcLtVehDvmt(\n          SynPop..[!IsMetro., ModelVar.],\n          AveSovPropModels_,\n          Threshold = LtVehParm_Va..$Threshold[\"NonMetro\", yr],\n          PropSuitable = LtVehParm_Va..$PropSuitable[\"NonMetro\", yr],\n          Sharing = FALSE\n        )\n    }\n    #Calculate adjustment factor\n    LtVehAdjFactor.Hh <-\n      (SynPop..$Dvmt - LtVehDvmt.Hh) / SynPop..$Dvmt\n    LtVehAdjFactor.Hh[SynPop..$Dvmt == 0] <- 1\n    \n    #Calculate overall adjustment factor\n    #-----------------------------------\n    SynPop..$LtVehAdjFactor <-\n      LtVehAdjFactor.Hh  #Save the factor in SynPop..\n    SynPop..$TdmAdjFactor <-\n      TdmAdjFactor.Hh  #Save the factor in SynPop..\n    SynPop..$TdmLtVehAdjFactor <-\n      TdmAdjFactor.Hh * LtVehAdjFactor.Hh  #Save the factor in SynPop..\n    rm(LtVehDvmt.Hh,\n       TdmAdjFactor.Hh,\n       LtVehAdjFactor.Hh,\n       ModelVar.,\n       TdmAdjDvmt.Hh)\n    SynPop..$LogSize <- NULL\n    SynPop..$LogDvmt <- NULL\n    \n    #Step 2e: Calculate the 95th percentile and maximum DVMT from the adjusted\n    #DVMT\n    #=========================================================================\n    \n    SynPop..$MaxDvmt <- 0\n    SynPop..$Dvmt95 <- 0\n    if (any(IsMetro.)) {\n      MetroMax95th.2d <-\n        predictMaxDvmt(SynPop..[IsMetro., c(\"Dvmt\", \"MaxDvmt\", \"Dvmt95\")],\n                       DvmtLmModels_, \"Metro\")\n      SynPop..$MaxDvmt[IsMetro.] <- MetroMax95th.2d[, 1]\n      SynPop..$Dvmt95[IsMetro.] <- MetroMax95th.2d[, 2]\n      rm(MetroMax95th.2d)\n    }\n    if (any(!IsMetro.)) {\n      NonMetroMax95th.2d <-\n        predictMaxDvmt(SynPop..[!IsMetro., c(\"Dvmt\", \"MaxDvmt\", \"Dvmt95\")],\n                       DvmtLmModels_, \"NonMetro\")\n      SynPop..$MaxDvmt[!IsMetro.] <- NonMetroMax95th.2d[, 1]\n      SynPop..$Dvmt95[!IsMetro.] <- NonMetroMax95th.2d[, 2]\n      rm(NonMetroMax95th.2d)\n    }\n    gc()\n    \n    \n    #Step 2f: Calculate Walk, Bike, & Transit Trips\n    #==============================================\n    #Set up walk, bike and transit fields\n    SynPop..$AveWalkTrips <- numeric(nrow(SynPop..))\n    SynPop..$AveBikeTrips <- numeric(nrow(SynPop..))\n    SynPop..$AveTransitTrips <- numeric(nrow(SynPop..))\n    \n    #Calculate for metropolitan households\n    if (any(IsMetro.)) {\n      #Identify data fields to use\n      ModelVar. <-\n        c(\n          \"Age0to14\",\n          \"Age15to19\",\n          \"Age20to29\",\n          \"Age30to54\",\n          \"Age55to64\",\n          \"Age65Plus\",\n          \"Hhsize\",\n          \"Hhincttl\",\n          \"Htppopdn\",\n          \"Tranmilescap\",\n          \"Urban\",\n          \"Dvmt\",\n          \"Hhvehcnt\"\n        )\n      \n      #Calculate the alternative mode trips and add to household dataset\n      AltModeTrips_ <-\n        calcAltModeTrips(SynPop..[IsMetro., ModelVar.],\n                         AltModeModels_, \"Metro\")\n      SynPop..$AveWalkTrips[IsMetro.] <- AltModeTrips_$Walk\n      SynPop..$AveBikeTrips[IsMetro.] <- AltModeTrips_$Bike\n      SynPop..$AveTransitTrips[IsMetro.] <- AltModeTrips_$Transit\n      rm(ModelVar., AltModeTrips_)\n    }\n    \n    #Calculate for non-metropolitan households\n    if (any(!IsMetro.)) {\n      #Identify data fields to use\n      ModelVar. <-\n        c(\n          \"Age0to14\",\n          \"Age15to19\",\n          \"Age20to29\",\n          \"Age30to54\",\n          \"Age55to64\",\n          \"Age65Plus\",\n          \"Hhsize\",\n          \"Hhincttl\",\n          \"Htppopdn\",\n          \"Urban\",\n          \"Dvmt\",\n          \"Hhvehcnt\"\n        )\n      \n      #Calculate the alternative mode trips and add to household dataset\n      AltModeTrips_ <-\n        calcAltModeTrips(SynPop..[!IsMetro., ModelVar.],\n                         AltModeModels_, \"NonMetro\")\n      SynPop..$AveWalkTrips[!IsMetro.] <- AltModeTrips_$Walk\n      SynPop..$AveBikeTrips[!IsMetro.] <- AltModeTrips_$Bike\n      SynPop..$AveTransitTrips[!IsMetro.] <- AltModeTrips_$Transit\n      rm(ModelVar., AltModeTrips_)\n    }\n    \n    \n    #Step 2g: Apply parking model to identify parkers and calculate daily\n    #parking costs\n    #=====================================================================\n    \n    #Calculate parking costs for households that live in metropolitan areas\n    SynPop..$DailyPkgCost <- 0\n    SynPop..$CashOutIncAdj <- 0\n    ModelVar. <- c(\"DrvAgePop\", \"Houseid\", \"Dvmt\", \"Hhvehcnt\")\n    if (any(IsMetro.)) {\n      Parkers_ <- idPayingParkers(\n        SynPop..[IsMetro., ModelVar.],\n        PropWrkPkg = PkgParm_Va..$PropWrkPkg[MetroArea, yr],\n        PropWrkChrgd = PkgParm_Va..$PropWrkChrgd[MetroArea, yr],\n        PropCashOut = PkgParm_Va..$PropCashOut[MetroArea, yr],\n        PropOthChrgd = PkgParm_Va..$PropOthChrgd[MetroArea, yr],\n        PkgCost = PkgParm_Va..$PkgCost[MetroArea, yr],\n        PropWrkTrav = 0.22,\n        WrkDaysPerYear = 260\n      )\n      PkgCosts_ <-\n        calcParkCostAdj(SynPop..[IsMetro., ModelVar.], Parkers_)\n      SynPop..$DailyPkgCost[IsMetro.] <- PkgCosts_$DailyPkgCost\n      SynPop..$CashOutIncAdj[IsMetro.] <- PkgCosts_$CashOutIncAdj\n      rm(Parkers_, PkgCosts_)\n    }\n    rm(ModelVar.)\n    gc()\n    \n    #Remove variables from SynPop.. not needed\n    #-----------------------------------------\n    SynPop..$PowPerCapInc <- NULL\n\n    #Save results\n    #------------\n    Filename <- paste(OutputYearDir, \"/\", co, \".RData\", sep = \"\")\n    save(SynPop.., file = Filename, compress = TRUE)\n    rm(SynPop..)\n    gc()\n    \n    #End loop through counties\n    gc()\n  }\n  \n  #Report end of procedure\n  print(StartTime)\n  print(Sys.time())\n  \n  \n  #==================================================\n  #STEP 3: SIMULATE HOUSEHOLD VEHICLE CHARACTERISTICS\n  #==================================================\n  \n  #Log start of procedure\n  StartTime <- Sys.time()\n  print(\"Simulation of household vehicle characteristics\")\n  \n  #Iterate through counties\n  #========================\n  \n  for (co in Co) {\n    print(co)\n    \n    #Load county file\n    Filename <- paste(OutputYearDir, \"/\", co, \".RData\", sep = \"\")\n    SynPop.. <- assignLoad(Filename)\n    \n    #Identify metropolitan area\n    MetroArea <- CountyGroups..[co, \"Msa\"]\n    IsMetro. <- SynPop..$DevType == \"Metropolitan\"\n    \n    \n    #Step 3a: Calculate vehicle types, ages, initial fuel economy, and assign\n    #vehicle DVMT\n    #=========================================================================\n    \n    #Predict light truck ownership and vehicle ages\n    #----------------------------------------------\n    #Apply vehicle type model\n    ModelVar. <-\n      c(\"Hhincttl\", \"Htppopdn\", \"Urban\", \"Hhvehcnt\", \"Hhsize\")\n    SynPop..$VehType <-\n      predictLtTruckOwn(SynPop..[, ModelVar.], Model_ = LtTruckModels_,\n                        TruckProp = LtTruckProp.CoYr[co, yr])\n    rm(ModelVar.)\n    #Apply vehicle age model\n    ModelVar. <- c(\"IncGrp\", \"Hhvehcnt\", \"VehType\")\n    VehTypeAgeResults_ <-\n      calcVehicleAges(SynPop..[, ModelVar.], VProp_ = VehProp_,\n                      AdjRatio = AgeAdj.YrTy[yr, ])\n    rm(ModelVar.)\n    #Add type and age model results to the TestHh..\n    SynPop..$VehType[SynPop..$Hhvehcnt == 0] <- NA\n    SynPop..$VehAge <- VehTypeAgeResults_$VehAge\n    SynPop..$VehAge[SynPop..$Hhvehcnt == 0] <- NA\n    rm(VehTypeAgeResults_)\n    gc()\n    \n    #Assign initial fuel economy and DVMT to vehicles\n    #------------------------------------------------\n    #Assign fuel economy to vehicles\n    HasVeh.Hh <- SynPop..$Hhvehcnt >= 1\n    SynPop..$VehMpg <- NA\n    ModelVar. <- c(\"VehType\", \"VehAge\", \"Hhvehcnt\")\n    SynPop..$VehMpg[HasVeh.Hh] <-\n      assignFuelEconomy(SynPop..[HasVeh.Hh, ModelVar.],\n                        AutoLtTrkMpg..Yr, CurrYear =\n                          yr)\n    rm(ModelVar.)\n    #Assign vehicle mileage proportions to household vehicles\n    SynPop..$DvmtProp <- NA\n    ModelVar. <- c(\"Hhvehcnt\", \"Houseid\")\n    SynPop..$DvmtProp[HasVeh.Hh] <-\n      apportionDvmt(SynPop..[HasVeh.Hh,],\n                    DP_ = DvmtProp_)\n    rm(ModelVar.)\n    #Assign vehicle mileage to household vehicles\n    SynPop..$VehDvmt <-\n      calcVehDvmt(SynPop..$Dvmt, SynPop..$DvmtProp)\n    gc()\n    \n    #Step 3b: Identify HEVs & PHEVs\n    #==============================\n    \n    #Apply HEV/PHEV model\n    HasVeh.Hh <- SynPop..$Hhvehcnt >= 1\n    ModelVar. <-\n      c(\n        \"Houseid\",\n        \"Hhvehcnt\",\n        \"VehType\",\n        \"VehAge\",\n        \"VehDvmt\",\n        \"Carshare\",\n        \"DevType\",\n        \"Hhincttl\",\n        \"Htppopdn\",\n        \"Hhsize\",\n        \"Age0to14\",\n        \"Age65Plus\",\n        \"Tranmilescap\",\n        \"Urban\",\n        \"VehMpg\"\n      )\n    PhevResults_ <- assignPhev(\n      SynPop..[HasVeh.Hh, ModelVar.],\n      PhevRangeProp..Yr = PhevRangeProp..Yr,\n      CurrYear = yr,\n      PhevPropModel_ = PhevMilePropModel_,\n      HevMpgProp..Yr = HevMpgProp..Yr,\n      OptimProp = OptimProp.Yr[yr]\n    )\n    rm(ModelVar.)\n    \n    #Update SynPop.. data\n    SynPop..$VehDvmt[HasVeh.Hh] <- PhevResults_$VehDvmt_\n    SynPop..$DvmtProp[HasVeh.Hh] <- PhevResults_$DvmtProp_\n    SynPop..$EvVehDvmt <- NA\n    SynPop..$EvVehDvmt[HasVeh.Hh] <- PhevResults_$EvVehDvmt_\n    SynPop..$HcVehDvmt <- NA\n    SynPop..$HcVehDvmt[HasVeh.Hh] <- PhevResults_$HcVehDvmt_\n    SynPop..$VehMpg[HasVeh.Hh] <- PhevResults_$VehMpg_\n    SynPop..$VehMpkwh <- NA\n    SynPop..$VehMpkwh[HasVeh.Hh] <- PhevResults_$VehMpkwh_\n    SynPop..$Powertrain <- NA\n    SynPop..$Powertrain[HasVeh.Hh] <- PhevResults_$Powertrain_\n    rm(PhevResults_, HasVeh.Hh)\n    gc()\n    \n    #Step 3c: Identify EVs\n    #=====================\n    \n    #Apply EV model\n    ModelVar. <-\n      c(\n        \"Houseid\",\n        \"Hhvehcnt\",\n        \"VehType\",\n        \"VehAge\",\n        \"VehDvmt\",\n        \"Dvmt95\",\n        \"DvmtProp\",\n        \"Powertrain\",\n        \"VehMpg\",\n        \"VehMpkwh\",\n        \"EvVehDvmt\",\n        \"HcVehDvmt\"\n      )\n    HasVeh.Hh <- SynPop..$Hhvehcnt >= 1\n    HasDvmt.Hh <- SynPop..$Dvmt > 0\n    EvResults_ <-\n      assignEv(SynPop..[HasVeh.Hh & HasDvmt.Hh, ModelVar.],\n               EvRangeProp..Yr = EvRangeProp..Yr,\n               CurrYear = yr)\n    SynPop..$EvVehDvmt[HasVeh.Hh & HasDvmt.Hh] <- EvResults_$EvVehDvmt_\n    SynPop..$HcVehDvmt[HasVeh.Hh & HasDvmt.Hh] <- EvResults_$HcVehDvmt_\n    SynPop..$VehMpg[HasVeh.Hh & HasDvmt.Hh] <- EvResults_$VehMpg_\n    SynPop..$VehMpkwh[HasVeh.Hh & HasDvmt.Hh] <- EvResults_$VehMpkwh_\n    SynPop..$Powertrain[HasVeh.Hh & HasDvmt.Hh] <- EvResults_$Powertrain_\n    rm(EvResults_, HasVeh.Hh, HasDvmt.Hh, ModelVar.)\n    gc()\n    \n    #Step 3d: Calculate vehicle depreciation expenses\n    #================================================\n    \n    SynPop..$DepExp <- 0\n    HasVeh.Hh <- SynPop..$Hhvehcnt >= 1\n    ModelVar. <- c(\"Houseid\", \"Hhvehcnt\", \"VehType\", \"VehAge\")\n    SynPop..$DepExp[HasVeh.Hh] <-\n      calcVehDepreciationExp(SynPop..[HasVeh.Hh, ModelVar.])\n    rm(HasVeh.Hh, ModelVar.)\n    gc()\n    \n    #Step 3e: Assign PAYD Insurance\n    #==============================\n    \n    ModelVar. <-\n      c(\n        \"Houseid\",\n        \"Age0to14\",\n        \"Age15to19\",\n        \"Age20to29\",\n        \"Age30to54\",\n        \"Age55to64\",\n        \"Age65Plus\",\n        \"Dvmt\",\n        \"Hhvehcnt\",\n        \"Hhincttl\",\n        \"VehType\",\n        \"VehAge\"\n      )\n    PaydWeights.Hh <-\n      estPaydWeights(Data.. = SynPop..[ModelVar.], yr = yr)\n    SynPop..$Payd <-\n      selectFromWeights(PaydWeights.Hh, PropToSelect = Payd..Yr[yr, \"Proportion\"])\n    rm(ModelVar., PaydWeights.Hh)\n    gc()\n    \n    #Save county results\n    #===================\n    \n    Filename <- paste(OutputYearDir, \"/\", co, \".RData\", sep = \"\")\n    save(SynPop.., file = Filename, compress = TRUE)\n    rm(SynPop..)\n    gc()\n    gc()\n    \n    # End loop through counties\n    gc()\n  }\n  \n  #Report end of procedure\n  print(StartTime)\n  print(Sys.time())\n  \n  \n  #=====================================================\n  #STEP 4: EQUILIBRATE DVMT, COSTS, REVENUES, CONGESTION\n  #=====================================================\n  \n  #Calculate and save unit emissions for fuel and electricity for year\n  #--------------------------------------------------------------------\n  #These are calculated and saved for the purpose of computing output measures\n  #Calculate average fuel CO2e per gallon\n  AveFuelCo2e. <- calcAveFuelCo2e(\n    yr,\n    Fuels..Yr = AutoLtTrkFuels..Yr,\n    Co2..Yr = FuelCo2..Yr,\n    MjPerGallon = 121,\n    OutputType = \"MetricTons\"\n  )\n  Filename <- paste(OutputYearDir, \"AveFuelCo2e.RData\", sep = \"/\")\n  save(AveFuelCo2e., file = Filename, compress = TRUE)\n  rm(Filename)\n  # Calculate average electricity CO2e per Kwh\n  AveElectricCo2e.Co <-\n    calcAveElectricCo2e(yr, Co2.CoYr = PowerCo2.CoYr, OutputType = \"MetricTons\")\n  Filename <-\n    paste(OutputYearDir, \"AveElectricCo2e.Co.RData\", sep = \"/\")\n  save(AveElectricCo2e.Co, file = Filename, compress = TRUE)\n  rm(Filename)\n  \n  #Loop to equilibrate DVMT, travel costs, revenues and congestion\n  #---------------------------------------------------------------\n  \n  #Create list to store DVMT, cost totals\n  Dvmt.CoDt <- Pop.CoDt * 0\n  Va <-\n    c(\n      \"Dvmt\",\n      \"AdjDvmt\",\n      \"CongPrice\",\n      \"FuelCost\",\n      \"PowerCost\",\n      \"RoadUseTax\",\n      \"CarbonTax\",\n      \"AddedExtTax\",\n      \"PaydCost\",\n      \"TotExtCost\",\n      \"HhTotCost\",\n      \"FutrCostPerMi\",\n      \"VehOwnExp\",\n      \"TotRoadCost\"\n    )\n  CostSummary.CoVa <-\n    array(0,\n          dim = c(length(Co), length(Va)),\n          dimnames = list(Co, Va))\n  AveCongTaxPerMi.Ma <- numeric(length(Ma))\n  names(AveCongTaxPerMi.Ma) <- Ma\n  ExtraModCost <- 0\n  \n  #Loop 4 times if equilibrating cost and revenues, 2 time otherwise\n  if (CalcVmtSurcharge) {\n    It <- 1:4\n  } else {\n    It <- 1:2\n  }\n  VmtSurcharge.It <- numeric(length(It))\n  rm(Va)\n  \n  #Begin iteration loop\n  for (it in It) {\n    \n    #Log start of iteration\n    StartTime <- Sys.time()\n    print(paste(\n      \"Iteration\",\n      it,\n      \"Calculate emissions and cost and adjust DVMT\"\n    ))\n    \n    #Steps 4a & 4b: calculate energy consumption, CO2e, production, household\n    #costs, and adjust DVMT from costs\n    #========================================================================\n    for (co in Co) {\n      \n      #Report county\n      print(co)\n      \n      # Load county file\n      Filename <-\n        paste(OutputYearDir, \"/\", co, \".RData\", sep = \"\")\n      SynPop.. <- assignLoad(Filename)\n      \n      # Identify metropolitan area\n      MetroArea <- CountyGroups..[co, \"Msa\"]\n      IsMetro. <- SynPop..$DevType == \"Metropolitan\"\n      \n      \n      #Step 4a: Calculate fuel & electricity consumption, CO2e production, &\n      #household costs\n      #======================================================================\n      \n      #Calculate fuel & electricity consumption and CO2e production\n      #------------------------------------------------------------\n      ModelVar. <-\n        c(\"Hhvehcnt\",\n          \"HcVehDvmt\",\n          \"VehMpg\",\n          \"VehType\",\n          \"EvVehDvmt\",\n          \"VehMpkwh\",\n          \"Dvmt\")\n      FuelElecCo2e_ <-\n        calcVehFuelElecCo2(\n          SynPop..[, ModelVar.],\n          AveFuelCo2e. = AveFuelCo2e.,\n          AveElectricCo2e = AveElectricCo2e.Co[co],\n          CsharEffFactor = 1\n        )\n      SynPop..$FuelGallons <- FuelElecCo2e_$FuelGallons\n      SynPop..$FuelCo2e <- FuelElecCo2e_$FuelCo2e\n      SynPop..$ElecKwh <- FuelElecCo2e_$ElecKwh\n      SynPop..$ElecCo2e <- FuelElecCo2e_$ElecCo2e\n      rm(FuelElecCo2e_)\n      rm(ModelVar.)\n      gc()\n      \n      #Calculate household travel costs\n      #--------------------------------\n      #Identify congestion price for metropolitan area if any\n      if (!is.na(MetroArea)) {\n        CongPrice <- AveCongTaxPerMi.Ma[MetroArea]\n      } else {\n        CongPrice <- 0\n      }\n      #Identify the VmtSurcharge calculated to balance costs and revenues\n      #Is 0 on first iteration and if no equilibration of costs and revenues\n      if (it == 1 | !CalcVmtSurcharge) {\n        VmtSurcharge <- 0\n      } else {\n        VmtSurcharge <-\n          VmtSurcharge.It[it - 1]   #Is value calculated in previous iteration\n      }\n      #Calculate household costs\n      ModelVar. <-\n        c(\n          \"Dvmt\",\n          \"FuelGallons\",\n          \"FuelCo2e\",\n          \"ElecCo2e\",\n          \"ElecKwh\",\n          \"DevType\",\n          \"Payd\",\n          \"DailyPkgCost\",\n          \"Hhvehcnt\",\n          \"DepExp\",\n          \"Hhincttl\"\n        )\n      Costs_ <- calcCosts(\n        Data.. = SynPop..[, ModelVar.],\n        Costs. = Costs.YrCs[yr,],\n        PaydRate = Payd..Yr[yr, \"RatePerMile\"],\n        CongPrice = CongPrice,\n        VmtSurcharge = VmtSurcharge,\n        ExtraModCost = ExtraModCost\n      )\n      rm(VmtSurcharge)\n      #Add selected cost data to household records\n      SynPop..$FutrCostPerMi <- Costs_$FutrCostPerMi\n      SynPop..$TotExtCost <- Costs_$TotExtCost\n      SynPop..$HhTotCost <- Costs_$HhTotCost\n      SynPop..$VehOwnExp <- Costs_$VehOwnExp\n      #Add sums to DVMT and cost summary\n      Dvmt.CoDt[co, ] <-\n        tapply(SynPop..$Dvmt, SynPop..$DevType, sum)[Dt]\n      Dvmt.CoDt[is.na(Dvmt.CoDt)] <- 0\n      CostSummary.CoVa[co, \"Dvmt\"] <- sum(Dvmt.CoDt[co, ])\n      CostSummary.CoVa[co, \"FuelCost\"] <- sum(Costs_$FuelCost)\n      CostSummary.CoVa[co, \"PowerCost\"] <- sum(Costs_$PowerCost)\n      CostSummary.CoVa[co, \"RoadUseTax\"] <- sum(Costs_$RoadUseTax)\n      CostSummary.CoVa[co, \"CarbonTax\"] <- sum(Costs_$CarbonTax)\n      CostSummary.CoVa[co, \"AddedExtTax\"] <-\n        sum(Costs_$AddedExtTax)\n      CostSummary.CoVa[co, \"PaydCost\"] <- sum(Costs_$PaydCost)\n      CostSummary.CoVa[co, \"TotExtCost\"] <- sum(Costs_$TotExtCost)\n      CostSummary.CoVa[co, \"HhTotCost\"] <- sum(Costs_$HhTotCost)\n      CostSummary.CoVa[co, \"FutrCostPerMi\"] <-\n        sum(Costs_$FutrCostPerMi)\n      CostSummary.CoVa[co, \"VehOwnExp\"] <- sum(Costs_$VehOwnExp)\n      CostSummary.CoVa[co, \"TotRoadCost\"] <-\n        sum(Costs_$TotRoadCost)\n      rm(Costs_, ModelVar.)\n      gc()\n      \n      #Step 4b: Calculate DVMT with new costs and reallocate to vehicles\n      #=================================================================\n      \n      #Recalculate DVMT\n      #----------------\n      PrevDvmt.Hh <- SynPop..$Dvmt\n      ModelVar. <-\n        c(\n          \"Hhincttl\",\n          \"CashOutIncAdj\",\n          \"Htppopdn\",\n          \"Hhvehcnt\",\n          \"Tranmilescap\",\n          \"Fwylnmicap\",\n          \"DrvAgePop\",\n          \"Hhsize\",\n          \"Age0to14\",\n          \"Age15to19\",\n          \"Age20to29\",\n          \"Age30to54\",\n          \"Age55to64\",\n          \"Age65Plus\",\n          \"Urban\",\n          \"BaseCostPerMi\",\n          \"FutrCostPerMi\"\n        )\n      if (any(IsMetro.)) {\n        SynPop..$Dvmt[IsMetro.] <-\n          calcAdjAveDvmt(\n            SynPop..[IsMetro., ModelVar.],\n            DvmtLmModels_,\n            \"Metro\",\n            BudgetProp = BudgetProp,\n            AnnVmtInflator = AnnVmtInflator,\n            TrnstnProp = 1\n          )[[1]]\n      }\n      if (any(!IsMetro.)) {\n        SynPop..$Dvmt[!IsMetro.] <-\n          calcAdjAveDvmt(\n            SynPop..[!IsMetro., ModelVar.],\n            DvmtLmModels_,\n            \"NonMetro\",\n            BudgetProp = BudgetProp,\n            AnnVmtInflator = AnnVmtInflator,\n            TrnstnProp = 1\n          )[[1]]\n      }\n      \n      #Calculate light-weight vehicle DVMT and adjust household DVMT\n      #-------------------------------------------------------------\n      SynPop..$LtVehDvmt <-\n        SynPop..$Dvmt * (1 - SynPop..$LtVehAdjFactor)\n      SynPop..$Dvmt <- SynPop..$Dvmt * SynPop..$TdmLtVehAdjFactor\n      \n      #Calculate 95th percentile and maximum DVMT\n      #------------------------------------------\n      SynPop..$MaxDvmt <- 0\n      SynPop..$Dvmt95 <- 0\n      if (any(IsMetro.)) {\n        MetroMax95th.2d <-\n          predictMaxDvmt(SynPop..[IsMetro., c(\"Dvmt\", \"MaxDvmt\", \"Dvmt95\")],\n                         DvmtLmModels_, \"Metro\")\n        SynPop..$MaxDvmt[IsMetro.] <- MetroMax95th.2d[, 1]\n        SynPop..$Dvmt95[IsMetro.] <- MetroMax95th.2d[, 2]\n        rm(MetroMax95th.2d)\n      }\n      if (any(!IsMetro.)) {\n        NonMetroMax95th.2d <-\n          predictMaxDvmt(SynPop..[!IsMetro., c(\"Dvmt\", \"MaxDvmt\", \"Dvmt95\")],\n                         DvmtLmModels_, \"NonMetro\")\n        SynPop..$MaxDvmt[!IsMetro.] <- NonMetroMax95th.2d[, 1]\n        SynPop..$Dvmt95[!IsMetro.] <- NonMetroMax95th.2d[, 2]\n        rm(NonMetroMax95th.2d)\n      }\n      gc()\n      \n      #Split adjusted DVMT among vehicles\n      #----------------------------------\n      DvmtAdjFactor.Hh <- SynPop..$Dvmt / PrevDvmt.Hh\n      HasVeh.Hh <- SynPop..$Hhvehcnt >= 1\n      ModelVar. <- c(\"VehDvmt\", \"HcVehDvmt\", \"EvVehDvmt\")\n      AdjDvmt_ <-\n        allocateAdjDvmt(SynPop..[HasVeh.Hh, ModelVar.], \n                        DvmtAdjFactor.Hh[HasVeh.Hh])\n      SynPop..$VehDvmt[HasVeh.Hh] <- AdjDvmt_$VehDvmt\n      SynPop..$EvVehDvmt[HasVeh.Hh] <- AdjDvmt_$EvVehDvmt\n      SynPop..$HcVehDvmt[HasVeh.Hh] <- AdjDvmt_$HcVehDvmt\n      rm(DvmtAdjFactor.Hh, HasVeh.Hh, ModelVar., AdjDvmt_)\n      gc()\n      \n      #Tabulate DVMT\n      #-------------\n      Dvmt.CoDt[co,] <-\n        tapply(SynPop..$Dvmt, SynPop..$DevType, sum, na.rm = TRUE)[Dt]\n      Dvmt.CoDt[is.na(Dvmt.CoDt)] <- 0\n      CostSummary.CoVa[co, \"AdjDvmt\"] <-\n        sum(SynPop..$Dvmt, na.rm = TRUE)\n      \n      #Save the household dataset\n      #--------------------------\n      Filename <- paste(OutputYearDir, \"/\", co, \".RData\", sep = \"\")\n      save(SynPop.., file = Filename, compress = TRUE)\n      rm(SynPop..)\n      gc()\n      gc()\n      \n      #End iteration through counties\n    }\n    \n    #Save the tabulations of Dvmt and Costs\n    #--------------------------------------\n    Filename <-\n      paste(OutputYearDir, \"/\", \"Dvmt.CoDt\", \".RData\", sep = \"\")\n    save(Dvmt.CoDt, file = Filename)\n    rm(Filename)\n    Filename <-\n      paste(OutputYearDir, \"/\", \"CostSummary.CoVa\", \".RData\", sep = \"\")\n    save(CostSummary.CoVa, file = Filename)\n    rm(Filename)\n    EndTime <- Sys.time()\n    print(EndTime - StartTime)\n    \n    #Step 4c: Calculate Effects of Congestion\n    #========================================\n    \n    local({\n      #Calculate truck VMT by metropolitan area\n      #----------------------------------------\n      #Calculate growth in total percapita income from base year\n      #Calculate change in income\n      BaseInc <- sum(BaseInc.CoDt)\n      FutrInc <- sum(Inc.CoDt)\n      IncGrowth <- FutrInc / BaseInc\n      #Calculate truck DVMT\n      TruckDvmt <-\n        IncGrowth * TruckVmtGrowthMultiplier * BaseTruckVmt / 365\n      #Allocate truck VMT to metropolitan areas for later congestion calculation\n      TruckDvmt.Ma <- TruckDvmt * MpoBaseDvmtParm..Ma$PropTruckDvmt\n      \n      #Calculate bus DVMT by metropolitan area\n      #---------------------------------------\n      #Calculate bus DVMT\n      BusDvmt.Ma <- BusRevMi.Ma * TranAdjFactor / 365\n      \n      #Calculate light vehicle DVMT by metropolitan area\n      #-------------------------------------------------\n      #Sum household light vehicle DVMT by metropolitan area\n      CoToMa. <- CountyGroups..$Msa\n      names(CoToMa.) <- rownames(CountyGroups..)\n      CoToMa. <- CoToMa.[!is.na(CoToMa.)]\n      HhDvmt.Ma <-\n        tapply(Dvmt.CoDt[names(CoToMa.), \"Metropolitan\"], CoToMa., sum)[Ma]\n      #Calculate commercial service vehicle DVMT\n      if (CommVehDvmtMethod == \"HouseholdIncome\") {\n        CommVehDvmt.CoDt <- \n          calcCommVehTravelFromHhIncome(Dvmt.CoDt, Inc.CoDt)$CommVehDvmt.CoDt\n      }\n      if (CommVehDvmtMethod == \"HouseholdDvmt\") {\n        CommVehDvmt.CoDt <- \n          calcCommVehTravelFromHhDvmt(Dvmt.CoDt)$CommVehDvmt.CoDt\n      }\n      CommVehDvmt.Ma <-\n        tapply(CommVehDvmt.CoDt[names(CoToMa.), \"Metropolitan\"], \n               CoToMa., sum)[Ma]\n      # Calculate total light vehicle DVMT that is on metropolitan area roadways\n      LtVehDvmt.Ma <-\n        (HhDvmt.Ma + CommVehDvmt.Ma) * LtVehDvmtFactor.Ma\n      # Clean up\n      rm(CoToMa.)\n      \n      #Calculate total DVMT by metropolitan area and type\n      #--------------------------------------------------\n      Dvmt.MaTy <-\n        cbind(LtVeh = LtVehDvmt.Ma,\n              Truck = TruckDvmt.Ma,\n              Bus = BusDvmt.Ma)\n      \n      #Sum population and base year population by metropolitan area\n      #------------------------------------------------------------\n      CoToMa. <- CountyGroups..$Msa\n      names(CoToMa.) <- rownames(CountyGroups..)\n      CoToMa. <- CoToMa.[!is.na(CoToMa.)]\n      Pop.Ma <-\n        tapply(Pop.CoDt[names(CoToMa.), \"Metropolitan\"], CoToMa., sum)[Ma]\n      BasePop.Ma <-\n        tapply(BasePop.CoDt[names(CoToMa.), \"Metropolitan\"], CoToMa., sum)[Ma]\n      rm(CoToMa.)\n      \n      #Initialize arrays to store results\n      #----------------------------------\n      Ty <- Abbr_$Ty\n      MpgMpkwhAdj.MaPt <-\n        array(0,\n              dim = c(length(Ma), length(Pt)),\n              dimnames = list(Ma, Pt))\n      VehHr.MaTy <-\n        array(0,\n              dim = c(length(Ma), length(Ty)),\n              dimnames = list(Ma, Ty))\n      AveSpeed.MaTy <-\n        array(0,\n              dim = c(length(Ma), length(Ty)),\n              dimnames = list(Ma, Ty))\n      FfVehHr.MaTy <-\n        array(0,\n              dim = c(length(Ma), length(Ty)),\n              dimnames = list(Ma, Ty))\n      DelayVehHr.MaTy <-\n        array(0,\n              dim = c(length(Ma), length(Ty)),\n              dimnames = list(Ma, Ty))\n      CongVmt.ClFcTyMa <-\n        array(\n          0,\n          dim = c(length(Cl), length(Fc), length(Ty), length(Ma)),\n          dimnames = list(Cl, Fc, Ty, Ma)\n        )\n      AveCongTaxPerMi.Ma <- numeric(length(Ma))\n      names(AveCongTaxPerMi.Ma) <- Ma\n      \n      #Calculate effects of congestion on speed and emissions\n      #------------------------------------------------------\n      for (ma in Ma) {\n        #Make an array of congestion prices\n        CongPrice.ClFc <-\n          array(0,\n                dim = c(length(Cl), length(Fc)),\n                dimnames = list(Cl, Fc))\n        CongPrice.ClFc[\"Sev\", \"Fwy\"] <-\n          CongPriceParm_Va..$FwySev[ma, yr]\n        CongPrice.ClFc[\"Ext\", \"Fwy\"] <-\n          CongPriceParm_Va..$FwyExt[ma, yr]\n        CongPrice.ClFc[\"Sev\", \"Art\"] <-\n          CongPriceParm_Va..$ArtSev[ma, yr]\n        CongPrice.ClFc[\"Ext\", \"Art\"] <-\n          CongPriceParm_Va..$ArtExt[ma, yr]\n        \n        #Calculate congestion results\n        CongResults_ <- calcCongestion(\n          CongModel_ = CongModel_,\n          Dvmt.Ty = Dvmt.MaTy[ma,],\n          PerCapFwy = FwyLnMiCap.Ma[ma],\n          PerCapArt = ArtLnMiCap.Ma[ma],\n          Pop = Pop.Ma[ma],\n          BasePop = BasePop.Ma[ma],\n          FwyArtProp = MpoBaseDvmtParm..Ma[ma, \"FwyArtProp\"],\n          BusVmtSplit.Fc = TruckBusFcDvmtSplit_Va..$BusVmt[ma,],\n          TruckVmtSplit.Fc = TruckBusFcDvmtSplit_Va..$TruckVmt[ma,],\n          OpsDeployParm_Va.MaYr = OpsDeployParm_Va.MaYr,\n          SmoothEcoDriveParm_Va.. = SmoothEcoDriveParm_Va..,\n          OtherOps_Yr.LvTy = OtherOps_Yr.LvTy,\n          CongPrice.ClFc = CongPrice.ClFc,\n          CongEfficiency.YrPt = CongEfficiency.YrPt,\n          ValueOfTime = ValueOfTime,\n          ma = ma\n        )\n        \n        #Insert results in arrays\n        MpgMpkwhAdj.MaPt[ma,] <- CongResults_$MpgMpkwhAdj.Pt\n        VehHr.MaTy[ma,] <- CongResults_$VehHr.Ty\n        AveSpeed.MaTy[ma,] <- CongResults_$AveSpeed.Ty\n        FfVehHr.MaTy[ma,] <- CongResults_$FfVehHr.Ty\n        DelayVehHr.MaTy[ma,] <- CongResults_$DelayVehHr.Ty\n        CongVmt.ClFcTyMa[, , \"LtVeh\" , ma] <-\n          CongResults_$LtVehDvmt.ClFc\n        CongVmt.ClFcTyMa[, , \"Truck\" , ma] <-\n          CongResults_$TruckDvmt.ClFc\n        CongVmt.ClFcTyMa[, , \"Bus\" , ma] <-\n          CongResults_$BusDvmt.ClFc\n        AveCongTaxPerMi.Ma[ma] <-\n          CongResults_$AveCongTaxPerMi\n        \n        # Clean up\n        rm(CongResults_)\n        \n      }\n      \n      #Save the results\n      #----------------\n      Filename <-\n        paste(OutputYearDir, \"/\", \"CommVehDvmt.CoDt\", \".RData\", sep = \"\")\n      save(CommVehDvmt.CoDt, file = Filename)\n      Filename <-\n        paste(OutputYearDir, \"/\", \"CommVehDvmt.Ma\", \".RData\", sep = \"\")\n      save(CommVehDvmt.Ma, file = Filename)\n      Filename <-\n        paste(OutputYearDir, \"/\", \"Dvmt.MaTy\", \".RData\", sep = \"\")\n      save(Dvmt.MaTy, file = Filename)\n      Filename <-\n        paste(OutputYearDir, \"/\", \"MpgMpkwhAdj.MaPt\", \".RData\", sep = \"\")\n      save(MpgMpkwhAdj.MaPt, file = Filename)\n      Filename <-\n        paste(OutputYearDir, \"/\", \"VehHr.MaTy\", \".RData\", sep = \"\")\n      save(VehHr.MaTy, file = Filename)\n      Filename <-\n        paste(OutputYearDir, \"/\", \"AveSpeed.MaTy\", \".RData\", sep = \"\")\n      save(AveSpeed.MaTy, file = Filename)\n      Filename <-\n        paste(OutputYearDir, \"/\", \"FfVehHr.MaTy\", \".RData\", sep = \"\")\n      save(FfVehHr.MaTy, file = Filename)\n      Filename <-\n        paste(OutputYearDir, \"/\", \"DelayVehHr.MaTy\", \".RData\", sep = \"\")\n      save(DelayVehHr.MaTy, file = Filename)\n      Filename <-\n        paste(OutputYearDir, \"/\", \"CongVmt.ClFcTyMa\", \".RData\", sep = \"\")\n      save(CongVmt.ClFcTyMa, file = Filename)\n      Filename <-\n        paste(OutputYearDir, \"/\", \"AveCongTaxPerMi.Ma\", \".RData\", sep = \"\")\n      save(AveCongTaxPerMi.Ma, file = Filename)\n      \n      #Return results to enclosing environment\n      #---------------------------------------\n      TruckDvmt <<- TruckDvmt\n      TruckDvmt.Ma <<- TruckDvmt.Ma\n      BusDvmt.Ma <<- BusDvmt.Ma\n      MpgMpkwhAdj.MaPt <<- MpgMpkwhAdj.MaPt\n      AveCongTaxPerMi.Ma <<- AveCongTaxPerMi.Ma\n      LtVehDvmt.Ma <<- LtVehDvmt.Ma\n      HhRoadDvmt.Ma <<- HhDvmt.Ma * LtVehDvmtFactor.Ma\n      Dvmt.MaTy <<- Dvmt.MaTy\n      \n    })\n    \n    \n    #Step 4d: Calculate Commercial Fuel Consumption, Emissions, Costs\n    #================================================================\n    \n    #Store all the commercial service vehicle calculations in a list\n    CommServ_ <- list()\n    #Calculate CS DVMT by county and development type\n    if (CommVehDvmtMethod == \"HouseholdIncome\") {\n      CommServ_ <- c(\n        CommServ_,\n        calcCommVehTravelFromHhIncome(Dvmt.CoDt, Inc.CoDt)\n      )\n    }\n    if (CommVehDvmtMethod == \"HouseholdDvmt\") {\n      CommServ_ <- c(CommServ_,\n                     calcCommVehTravelFromHhDvmt(Dvmt.CoDt))\n    }\n    #Calculate DVMT by vehicle type a vehicle age characteristics\n    CommServ_ <-\n      c(CommServ_, with(\n        CommServ_,\n        calcCommVehTypeAgeProp(\n          CommVehDvmt.CoDt,\n          yr,\n          CommServiceLtTruckProp.Yr,\n          VehProp_$AgCumProp.AgTy,\n          AgeAdj.YrTy\n        )\n      ))\n    #Calculate the powertrain proportions, MPG and MPKWH\n    CommServ_ <-\n      c(CommServ_,\n        with(\n          CommServ_,\n          calcCommVehPowertrainMpgMpkwh(\n            CommServicePtProp..Yr,\n            CommServAutoAgProp.Ag,\n            CommServLtTruckAgProp.Ag,\n            AutoLtTrkMpg..Yr,\n            HevMpgProp..Yr,\n            EvRangeProp..Yr,\n            MpgMpkwhAdj.MaPt\n          )\n        ))\n    #Calculate DVMT powered by hydrocarbons vs. electricity\n    CommServ_ <-\n      c(CommServ_, with(\n        CommServ_,\n        calcCommVehHcEvDvmt(\n          CommServAutoDvmt.CoDt,\n          CommServAutoProp.Pt,\n          CommServLtTruckDvmt.CoDt,\n          CommServLtTruckProp.Pt\n        )\n      ))\n    #Calculate daily electricity and power consumption\n    CommServ_ <-\n      c(CommServ_, with(\n        CommServ_,\n        calcFuelElectricityUse(\n          CommServAveAutoMpg.CoDt,\n          CommServAveLtTruckMpg.CoDt,\n          CommServAveAutoMpkwh.CoDt,\n          CommServAveLtTruckMpkwh.CoDt,\n          CommServAutoHcDvmt.CoDt,\n          CommServAutoEvDvmt.CoDt,\n          CommServLtTruckHcDvmt.CoDt,\n          CommServLtTruckEvDvmt.CoDt\n        )\n      ))\n    #Calculate average emissions per gallon of fuel consumed\n    CommServ_ <- c(CommServ_,\n                   calcAveFuelCarbonIntensity(yr, CommServiceFuels..Yr, \n                                              FuelCo2..Yr))\n    #Calculate emissions\n    CommServ_ <-\n      c(CommServ_, with(\n        CommServ_,\n        calcCommVehEmissions(\n          yr,\n          MjPerGallon,\n          PowerCo2.CoYr,\n          AveAutoFuelCo2,\n          AveLtTruckFuelCo2,\n          CommServAutoFuel.CoDt,\n          CommServLtTruckFuel.CoDt,\n          CommServAutoPower.CoDt,\n          CommServLtTruckPower.CoDt\n        )\n      ))\n    #Calculate commercial vehicle costs\n    CommServ_ <- c(CommServ_, with(\n      CommServ_,\n      calcCommVehCosts(\n        yr,\n        Costs.YrCs,\n        CountyGroups..,\n        it,\n        CommVehDvmt.CoDt,\n        CommServAutoDvmt.CoDt,\n        CommServLtTruckDvmt.CoDt,\n        CommServAutoFuel.CoDt,\n        CommServLtTruckFuel.CoDt,\n        CommServAutoPower.CoDt,\n        CommServLtTruckPower.CoDt,\n        CommServAutoHcCo2e.CoDt,\n        CommServLtTruckHcCo2e.CoDt,\n        CommServAutoEvCo2e.CoDt,\n        CommServLtTruckEvCo2e.CoDt\n      )\n    ))\n    #Calculate commercial auto and light truck emission rates by vehicle age\n    CommServ_ <-\n      c(CommServ_,\n        with(\n          CommServ_,\n          calcCommVehEmissionRatesByAge(\n            yr,\n            CommServAutoProp.AgPt,\n            CommServLtTruckProp.AgPt,\n            CommServAutoMpgMpkwh.AgPt,\n            CommServLtTruckMpgMpkwh.AgPt,\n            AveAutoFuelCo2,\n            AveLtTruckFuelCo2,\n            MjPerGallon,\n            PowerCo2.CoYr,\n            CommServAutoHcDvmt.CoDt,\n            CommServAutoEvDvmt.CoDt,\n            CommServLtTruckHcDvmt.CoDt,\n            CommServLtTruckEvDvmt.CoDt\n          )\n        ))\n    #Save the results\n    Filename <-\n      paste(OutputYearDir, \"/\", \"CommServ_\", \".RData\", sep = \"\")\n    save(CommServ_, file = Filename)\n    \n    \n    #Step 4e: Calculate Total Costs and VMT Surcharge to Pay for Infrastructure\n    #==========================================================================\n    \n    #Calculate total costs\n    #---------------------\n    #Calculate total household road cost, adjusting for DVMT adjustment\n    DvmtAdjRatio <-\n      sum(CostSummary.CoVa[, \"AdjDvmt\"]) / sum(CostSummary.CoVa[, \"Dvmt\"])\n    TotHhRoadCost <-\n      sum(CostSummary.CoVa[, \"TotRoadCost\"]) * DvmtAdjRatio\n    #Calculate light vehicle DVMT\n    LtVehDvmt <-\n      sum(CostSummary.CoVa[, \"AdjDvmt\"]) + CommServ_$CommVehDvmt\n    #First iteration, calculate the extra modernization cost for new lanes\n    #(ExtraModCost)\n    if (it == 1) {\n      HvyVehDvmtEq <-\n        TruckDvmt * CongModel_$Pce.Ty[\"Truck\"] + \n        sum(BusDvmt.Ma) * CongModel_$Pce.Ty[\"Bus\"]\n      LtVehAddCostProp <- LtVehDvmt / (LtVehDvmt + HvyVehDvmtEq)\n      LnMiAddCost <- LtVehAddCostProp * AnnLnMiAddCosts.Yr[yr] / 365\n      ExtraModCost <- LnMiAddCost / LtVehDvmt\n      TotRoadCost <-\n        TotHhRoadCost + CommServ_$CommServCosts.[\"TotRoadCost\"] + LnMiAddCost\n      rm(HvyVehDvmtEq, LtVehAddCostProp, LnMiAddCost)\n    #Otherwise sum household & commercial vehicle costs because they include\n    #the added lane-mile costs\n    } else {\n      TotRoadCost <-\n        TotHhRoadCost + CommServ_$CommServCosts.[\"TotRoadCost\"]\n    }\n    \n    # Calculate total revenues\n    #-------------------------\n    # Calculate total household revenues, adjusting for DVMT adjustment\n    TotHhRoadUseTax <-\n      sum(CostSummary.CoVa[, \"RoadUseTax\"]) * DvmtAdjRatio\n    #Add in estimated congestion tax if 1st iteration (since costs calculated\n    #before congestion tax)\n    if (it == 1) {\n      TotHhRoadUseTax <-\n        TotHhRoadUseTax + sum(HhRoadDvmt.Ma * AveCongTaxPerMi.Ma)\n    }\n    #Add in commercial light service vehicle\n    TotRoadUseTax <-\n      TotHhRoadUseTax + CommServ_$CommServCosts.[\"RoadUseTax\"]\n    \n    #Compare total costs to revenues and calculate VMT surcharge to pay for\n    #system\n    #----------------------------------------------------------------------\n    #This procedure calculates how much to increase a VMT tax to pay for system\n    #costs. It includes guards to keep the procedure from adding a negative\n    #surcharge that counteracts VMT tax assumptions that are inputs to the\n    #model. Calculate the gap between taxes and costs.\n    TaxGap <- TotRoadCost - TotRoadUseTax\n    if (CalcVmtSurcharge) {\n      #If this is the first iteration, the tax gap per mile is added to the\n      #starting surcharge of 0\n      if (it == 1) {\n        # Calculate a VmtSurcharge only if there is a positive tax gap\n        if (TaxGap > 0) {\n          VmtSurcharge.It[it] <- TaxGap / LtVehDvmt\n          # If the tax gap is negative, the VMT surcharge is zero\n        } else {\n          VmtSurcharge.It[it] <- 0\n        }\n        #If later iteration, add the calculated tax gap per mile to the previous\n        #surcharge\n      } else {\n        # If the VmtSurcharge for the previous iteration is positive,\n        # calculate the added surcharge for the iteration\n        if (VmtSurcharge.It[it - 1] > 0) {\n          VmtSurcharge.It[it] <-\n            VmtSurcharge.It[it - 1] +  TaxGap / LtVehDvmt\n          # Otherwise the VmtSurcharge is zero\n        } else {\n          VmtSurcharge.It[it] <- 0\n        }\n      }\n      #End calculation of VMT surcharge (if calculation is to be done)\n    }\n    \n    #Clean up\n    #--------\n    RoadCostSummary. <-\n      c(\n        TotRoadCost = TotRoadCost,\n        TotRoadUseTax = TotRoadUseTax,\n        TaxGap = TaxGap\n      )\n    Filename <-\n      paste(OutputYearDir, \"/\", \"RoadCostSummary.\", \".RData\", sep = \"\")\n    save(RoadCostSummary., file = Filename)\n    rm(\n      DvmtAdjRatio,\n      TotHhRoadCost,\n      LtVehDvmt,\n      TotRoadCost,\n      TotHhRoadUseTax,\n      TotRoadUseTax\n    )\n    gc()\n\n    \n    #Step 4f: Adjust MPG & MPKWH for ecodriving and low rolling resistance tires\n    #===========================\n    #Only do this once, on the first iteration. Otherwise ecodriving would keep\n    #increasing MPG with each iteration.\n    if (it == 1) {\n      StartTime <- Sys.time()\n      print(paste(\"Iteration\", it, \"Adjust MPG & MPKWH for ecodriving etc.\"))\n      \n      for (co in Co) {\n        print(co)\n        \n        #Load county file\n        Filename <-\n          paste(OutputYearDir, \"/\", co, \".RData\", sep = \"\")\n        SynPop.. <- assignLoad(Filename)\n        rm(Filename)\n        \n        #Identify metropolitan area\n        MetroArea <- CountyGroups..[co, \"Msa\"]\n        IsMetro. <- SynPop..$DevType == \"Metropolitan\"\n        \n        #Calculate adjustments\n        HasVeh.Hh <- SynPop..$Hhvehcnt >= 1\n        ModelVar. <-\n          c(\n            \"Houseid\",\n            \"Hhvehcnt\",\n            \"IsEcoDriver\",\n            \"IsLowRollTire\",\n            \"Powertrain\",\n            \"VehMpg\",\n            \"VehMpkwh\"\n          )\n        \n        #Get adjustments by powertrain for area. Note that non-mpo areas are\n        #average of smaller MPO areas (should be changed in future)\n        if (is.na(MetroArea)) {\n          MpgMpkwhAdj.Pt <-\n            colMeans(MpgMpkwhAdj.MaPt[c(\"RogueValley\", \"Bend\", \"Corvallis\"),])\n        } else {\n          MpgMpkwhAdj.Pt <- MpgMpkwhAdj.MaPt[MetroArea,]\n        }\n        MpgMpkwhAdj_ <-\n          adjEcoTire(\n            Data.. = SynPop..[HasVeh.Hh, ModelVar.],\n            MpgMpkwhAdj.Pt = MpgMpkwhAdj.Pt,\n            TireMpgImp = EcoTire..Yr[yr, \"TireMpgImp\"],\n            TireMpkwhImp = EcoTire..Yr[yr, \"TireMpkwhImp\"]\n          )\n        rm(ModelVar.)\n        \n        # Assign to households\n        SynPop..$VehMpg[HasVeh.Hh] <- MpgMpkwhAdj_$VehMpg_\n        SynPop..$VehMpkwh[HasVeh.Hh] <- MpgMpkwhAdj_$VehMpkwh_\n        rm(HasVeh.Hh, MpgMpkwhAdj_)\n        \n        # Save the household dataset\n        Filename <- paste(OutputYearDir, \"/\", co, \".RData\", sep = \"\")\n        save(SynPop.., file = Filename, compress = TRUE)\n        rm(SynPop.., IsMetro., MetroArea)\n        gc()\n        \n      }\n      \n      print(StartTime)\n      print(Sys.time())\n      \n    }\n    \n    Filename <-\n      paste(OutputYearDir, \"/\", \"VmtSurcharge.It\", \".RData\", sep = \"\")\n    save(VmtSurcharge.It, file = Filename)\n    rm(Filename)\n    #End of for loop to equilibrate DVMT, congestion, costs and road use taxes\n  }\n  \n  \n  #===============================================  \n  #STEP 5: CALCULATE WALK, BIKE, AND TRANSIT TRIPS\n  #===============================================\n  for (co in Co) {\n    \n    # Load county file\n    Filename <- paste(OutputYearDir, \"/\", co, \".RData\", sep = \"\")\n    SynPop.. <- assignLoad(Filename)\n    \n    # Identify metropolitan area\n    MetroArea <- CountyGroups..[co, \"Msa\"]\n    IsMetro. <- SynPop..$DevType == \"Metropolitan\"\n    \n    #Calculate for metropolitan households    \n    if (any(IsMetro.)) {\n      #Identify data fields to use\n      ModelVar. <- \n        c(\"Age0to14\", \"Age15to19\", \"Age20to29\", \"Age30to54\", \"Age55to64\",\n          \"Age65Plus\", \"Hhsize\", \"Hhincttl\", \"Htppopdn\", \"Tranmilescap\",\n          \"Urban\", \"Dvmt\", \"Hhvehcnt\")\n      \n      #Calculate the alternative mode trips and add to household dataset    \n      AltModeTrips_ <- \n        calcAltModeTrips(SynPop..[IsMetro., ModelVar.], \n                         AltModeModels_, \"Metro\")\n      SynPop..$AveWalkTrips[IsMetro.] <- AltModeTrips_$Walk\n      SynPop..$AveBikeTrips[IsMetro.] <- AltModeTrips_$Bike\n      SynPop..$AveTransitTrips[IsMetro.] <- AltModeTrips_$Transit\n      rm(ModelVar., AltModeTrips_)\n    }\n\n    #Calculate for non-metropolitan households    \n    if (any(!IsMetro.)) {\n      #Identify data fields to use\n      ModelVar. <- \n        c(\"Age0to14\", \"Age15to19\", \"Age20to29\", \"Age30to54\", \"Age55to64\",\n          \"Age65Plus\", \"Hhsize\", \"Hhincttl\", \"Htppopdn\",\n          \"Urban\", \"Dvmt\", \"Hhvehcnt\")\n      \n      #Calculate the alternative mode trips and add to household dataset    \n      AltModeTrips_ <- \n        calcAltModeTrips(SynPop..[!IsMetro., ModelVar.], \n                         AltModeModels_, \"NonMetro\")\n      SynPop..$AveWalkTrips[!IsMetro.] <- AltModeTrips_$Walk\n      SynPop..$AveBikeTrips[!IsMetro.] <- AltModeTrips_$Bike\n      SynPop..$AveTransitTrips[!IsMetro.] <- AltModeTrips_$Transit\n      rm(ModelVar., AltModeTrips_)\n    }\n    \n    # Save the household dataset\n    Filename <- paste(OutputYearDir, \"/\", co, \".RData\", sep = \"\")\n    save( SynPop.., file=Filename, compress=TRUE )\n    rm( SynPop.. )\n    gc()\n    \n  }\n  \n  \n  #===========================================================================\n  #STEP 6: CALCULATE METROPOLITAN AREA HEAVY VEHICLE CONSUMPTION AND EMISSIONS\n  #===========================================================================\n  \n  #Calculate truck and bus age distributions\n  #-----------------------------------------\n  #Calculate the truck age distribution\n  TruckAgProp.Ag <-\n    adjustHvyVehAgeDistribution(TruckBusAgeDist.AgTy[, \"Truck\"],\n                                AdjRatio = AgeAdj.YrTy[yr, \"Truck\"])\n  #Calculate bus age distribution\n  BusAgProp.Ag <-\n    adjustHvyVehAgeDistribution(TruckBusAgeDist.AgTy[, \"Bus\"],\n                                AdjRatio = AgeAdj.YrTy[yr, \"Bus\"])\n  \n  #Calculate truck and bus fuel economy\n  #------------------------------------\n  #Calculate truck fuel economy\n  TruckMpg <-\n    assignHvyVehFuelEconomy(\n      TruckAgProp.Ag,\n      Mpg..Yr = HvyVehMpgMpk..Yr,\n      Type = \"Truck_MPG\",\n      CurrYear = yr\n    )\n  #Calculate bus fuel economy\n  BusMpg <-\n    assignHvyVehFuelEconomy(\n      BusAgProp.Ag,\n      Mpg..Yr = HvyVehMpgMpk..Yr,\n      Type = \"Bus_MPG\",\n      CurrYear = yr\n    )\n  #Adjust fuel economy to account for congestion, eco-driving, etc for\n  #metropolitan areas\n  TruckMpg.Ma <- MpgMpkwhAdj.MaPt[, \"TruckIce\"] * TruckMpg\n  BusMpg.Ma <- MpgMpkwhAdj.MaPt[, \"BusIce\"] * BusMpg\n  #Calculate fuel economy for non-metropolitan areas\n  NonMpoTruckMpg <-\n    mean(MpgMpkwhAdj.MaPt[c(\"RogueValley\", \"Bend\", \"Corvallis\"), \"TruckIce\"])\n  \n  #Calculate truck fuel consumption by fuel type\n  #---------------------------------------------\n  #Calculate overall fuel consumption\n  TruckFuel.Ma <- Dvmt.MaTy[, \"Truck\"] / TruckMpg.Ma\n  rm(TruckMpg.Ma)\n  NonMpoTruckDvmt <- TruckDvmt - sum(Dvmt.MaTy[, \"Truck\"])\n  NonMpoTruckFuel <- NonMpoTruckDvmt * NonMpoTruckMpg\n  #Calculate fuel consumption by type\n  TruckFuelProp.Ft <- numeric(5)\n  names(TruckFuelProp.Ft) <- Ft\n  TruckFuelInput. <- unlist(HvyTruckFuels..Yr[yr, ])\n  PropDiesel <-\n    1 - TruckFuelInput.[\"PropGas\"] - TruckFuelInput.[\"PropCng\"]\n  TruckFuelProp.Ft[\"ULSD\"] <-\n    PropDiesel * (1 - TruckFuelInput.[\"DieselPropBio\"])\n  TruckFuelProp.Ft[\"Biodiesel\"] <-\n    PropDiesel * (TruckFuelInput.[\"DieselPropBio\"])\n  TruckFuelProp.Ft[\"Gasoline\"] <- (TruckFuelInput.[\"PropGas\"]) *\n    (1 - TruckFuelInput.[\"GasPropEth\"])\n  TruckFuelProp.Ft[\"Ethanol\"] <- (TruckFuelInput.[\"PropGas\"]) *\n    (TruckFuelInput.[\"GasPropEth\"])\n  TruckFuelProp.Ft[\"CNG\"] <- (TruckFuelInput.[\"PropCng\"])\n  TruckFuel.MaFt <- outer(TruckFuel.Ma, TruckFuelProp.Ft, \"*\")\n  NonMpoTruckFuel.Ft <- NonMpoTruckFuel * TruckFuelProp.Ft\n  rm(TruckFuelInput., PropDiesel, TruckFuelProp.Ft)\n  \n  #Calculate Bus Fuel Consumption and Emissions\n  #--------------------------------------------\n  #Calculate overall fuel consumption\n  BusPropFuel.Ma <- 1 - BusPropElectric.MaYr[, yr]\n  BusFuel.Ma <- (Dvmt.MaTy[, \"Bus\"] * BusPropFuel.Ma) / BusMpg.Ma\n  rm(BusMpg.Ma, BusPropFuel.Ma)\n  #Calculate fuel consumption by type\n  BusFuelProp.MaFt <-\n    array(0,\n          dim = c(length(Ma), length(Ft)),\n          dimnames = list(Ma, Ft))\n  for (ma in Ma) {\n    BusFuelProp.Ft <- numeric(5)\n    names(BusFuelProp.Ft) <- Ft\n    BusFuelInput. <- unlist(BusFuels.FpYrMa[, yr, ma])\n    PropDiesel <-\n      1 - BusFuelInput.[\"PropGas\"] - BusFuelInput.[\"PropCng\"]\n    BusFuelProp.Ft[\"ULSD\"] <-\n      PropDiesel * (1 - BusFuelInput.[\"DieselPropBio\"])\n    BusFuelProp.Ft[\"Biodiesel\"] <-\n      PropDiesel * (BusFuelInput.[\"DieselPropBio\"])\n    BusFuelProp.Ft[\"Gasoline\"] <- (BusFuelInput.[\"PropGas\"]) *\n      (1 - BusFuelInput.[\"GasPropEth\"])\n    BusFuelProp.Ft[\"Ethanol\"] <- (BusFuelInput.[\"PropGas\"]) *\n      (BusFuelInput.[\"GasPropEth\"])\n    BusFuelProp.Ft[\"CNG\"] <- (BusFuelInput.[\"PropCng\"])\n    BusFuelProp.MaFt[ma,] <- BusFuelProp.Ft\n    rm(BusFuelInput., PropDiesel, BusFuelProp.Ft)\n  }\n  BusFuel.MaFt <- sweep(BusFuelProp.MaFt, 1, BusFuel.Ma, \"*\")\n  \n  #Calculate emissions per gallon of fuel consumed\n  #-----------------------------------------------\n  FuelCo2.Ft <- numeric(5)\n  names(FuelCo2.Ft) <- Ft\n  FuelCo2Input. <- unlist(Inputs_$FuelCo2..Yr[yr,])\n  FuelCo2.Ft[\"ULSD\"] <- FuelCo2Input.[\"ULSD\"]\n  FuelCo2.Ft[\"Biodiesel\"] <- FuelCo2Input.[\"Biodiesel\"]\n  if (yr == \"1990\") {\n    FuelCo2.Ft[\"Gasoline\"] <- FuelCo2Input.[\"RFG\"]\n  } else {\n    FuelCo2.Ft[\"Gasoline\"] <- FuelCo2Input.[\"CARBOB\"]\n  }\n  FuelCo2.Ft[\"Ethanol\"] <- FuelCo2Input.[\"Ethanol\"]\n  FuelCo2.Ft[\"CNG\"] <- FuelCo2Input.[\"Cng\"]\n  \n  #Calculate truck and bus emissions\n  #---------------------------------\n  #Calculate truck emissions\n  TruckMj.MaTy <- TruckFuel.MaFt * MjPerGallon\n  TruckCo2e.MaTy <-\n    sweep(TruckMj.MaTy, 2, FuelCo2.Ft, \"*\") / 1000000\n  TruckCo2e.Ma <- rowSums(TruckCo2e.MaTy)\n  NonMpoTruckMj.Ty <- NonMpoTruckFuel.Ft * MjPerGallon\n  NonMpoTruckCo2e <- sum(NonMpoTruckMj.Ty * FuelCo2.Ft) / 1000000\n  rm(TruckMj.MaTy, TruckCo2e.MaTy, NonMpoTruckMj.Ty)\n  #Calculate bus emissions\n  BusMj.MaTy <- BusFuel.MaFt * MjPerGallon\n  BusHcCo2e.MaTy <-\n    sweep(BusMj.MaTy, 2, FuelCo2.Ft, \"*\") / 1000000\n  BusHcCo2e.Ma <- rowSums(BusHcCo2e.MaTy)\n  rm(BusMj.MaTy, BusHcCo2e.MaTy, FuelCo2.Ft)\n  \n  #Calculate bus and rail emissions from electricity consumption\n  #-------------------------------------------------------------\n  #Calculate DVMT and power consumed\n  RailDvmt.Ma <- RailRevMi.Ma * TranAdjFactor / 365\n  RailPower.Ma <- RailDvmt.Ma / HvyVehMpgMpk..Yr[yr, \"Train_MPkWh\"]\n  BusEvDvmt.Ma <- Dvmt.MaTy[, \"Bus\"] * BusPropElectric.MaYr[, yr]\n  BusPower.Ma <- BusEvDvmt.Ma / HvyVehMpgMpk..Yr[yr, \"Bus_MPkWh\"]\n  RailBusPower.Ma <- RailPower.Ma + BusPower.Ma\n  rm(RailDvmt.Ma, RailPower.Ma, BusEvDvmt.Ma, BusPower.Ma)\n  #Calculate average emissions per kwh by metropolitan area\n  CoToMa. <- CountyGroups..$Msa\n  names(CoToMa.) <- rownames(CountyGroups..)\n  CoToMa. <- CoToMa.[!is.na(CoToMa.)]\n  PowerCo2.Ma <-\n    tapply(PowerCo2.CoYr[names(CoToMa.), yr], CoToMa., mean)[Ma]\n  #Calculate total emissions by metropolitan area\n  RailBusEvCo2e.Ma <- RailBusPower.Ma * PowerCo2.Ma / 2204.62262\n  rm(CoToMa., PowerCo2.Ma)\n  \n  #Save the results\n  #----------------\n  Filename <-\n    paste(OutputYearDir, \"/\", \"TruckFuel.MaFt\", \".RData\", sep = \"\")\n  save(TruckFuel.MaFt, file = Filename)\n  Filename <-\n    paste(OutputYearDir, \"/\", \"NonMpoTruckDvmt\", \".RData\", sep = \"\")\n  save(NonMpoTruckDvmt, file = Filename)\n  Filename <-\n    paste(OutputYearDir, \"/\", \"NonMpoTruckFuel.Ft\", \".RData\", sep = \"\")\n  save(NonMpoTruckFuel.Ft, file = Filename)\n  Filename <-\n    paste(OutputYearDir, \"/\", \"BusFuel.MaFt\", \".RData\", sep = \"\")\n  save(BusFuel.MaFt, file = Filename)\n  Filename <-\n    paste(OutputYearDir, \"/\", \"TruckCo2e.Ma\", \".RData\", sep = \"\")\n  save(TruckCo2e.Ma, file = Filename)\n  Filename <-\n    paste(OutputYearDir, \"/\", \"NonMpoTruckCo2e\", \".RData\", sep = \"\")\n  save(NonMpoTruckCo2e, file = Filename)\n  Filename <-\n    paste(OutputYearDir, \"/\", \"BusHcCo2e.Ma\", \".RData\", sep = \"\")\n  save(BusHcCo2e.Ma, file = Filename)\n  Filename <-\n    paste(OutputYearDir, \"/\", \"RailBusPower.Ma\", \".RData\", sep = \"\")\n  save(RailBusPower.Ma, file = Filename)\n  Filename <-\n    paste(OutputYearDir, \"/\", \"RailBusEvCo2e.Ma\", \".RData\", sep = \"\")\n  save(RailBusEvCo2e.Ma, file = Filename)\n  rm(\n    TruckFuel.MaFt,\n    BusFuel.MaFt,\n    TruckCo2e.Ma,\n    BusHcCo2e.Ma,\n    RailBusPower.Ma,\n    RailBusEvCo2e.Ma\n  )\n  \n  \n  #=========================\n  #END THE LOOP FOR THE YEAR\n  #=========================\n  \n  # Clean up\n  gc()\n  \n}\n",
    "created" : 1480358263576.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1299719259",
    "id" : "48A45BAB",
    "lastKnownWriteTime" : 1502818470,
    "last_content_update" : 1502818470532,
    "path" : "~/Work/Projects/GreenSTEP_RSPM/Versions/State-3.6-NewMPOs/example1/scripts/GreenSTEP_Sim.r",
    "project_path" : "scripts/GreenSTEP_Sim.r",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}