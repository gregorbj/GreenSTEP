}
source('F:/Documents/Work/Projects/State-3.5/example/scripts/GreenSTEP.r')
TruckDvmt
HhRoadDvmt.Ma
Dvmt.MaTy
AveCongTaxPerMi.Ma
MpgMpkwhAdj.MaPt
CommServ_
it
Filename
calcCommVehTravelFromHhIncome
source('F:/Documents/Work/Projects/State-3.5/example/scripts/GreenSTEP.r')
calcCommVehHcEvDvmt(
calcCommVehHcEvDvmt
calcCommVehTravelFromHhDvmt()
calcCommVehTravelFromHhDvmt
calcCommVehTravelFromHhIncome
BaseYrVmt
BaseYear
IsBaseYear
source('F:/Documents/Work/Projects/State-3.5/example/scripts/GreenSTEP.r')
calcCommVehTravelFromHhDvmt
source('F:/Documents/Work/Projects/State-3.5/example/scripts/GreenSTEP.r')
#Version: 3.5
source('F:/Documents/Work/Projects/State-3.5/example/scripts/GreenSTEP.r')
source('F:/Documents/Work/Projects/State-3.5/example/scripts/GreenSTEP.r')
co
head(SynPop..)
dim(SynPop..)
MetroArea
sum(IsMetro.)
VmtSurcharge
Costs.YrCs[yr,]
Payd..Yr[yr, "RatePerMile"]
VmtSurcharge
ExtraModCost
ModelVar. <-
c(
"Dvmt",
"FuelGallons",
"FuelCo2e",
"ElecCo2e",
"ElecKwh",
"DevType",
"Payd",
"DailyPkgCost",
"Hhvehcnt",
"DepExp",
"Hhincttl"
)
Costs_ <- calcCosts(
Data.. = SynPop..[, ModelVar.],
Costs. = Costs.YrCs[yr,],
PaydRate = Payd..Yr[yr, "RatePerMile"],
CongPrice = CongPrice,
VmtSurcharge = VmtSurcharge,
ExtraModCost = ExtraModCost
)
calcCosts
Data.. = SynPop..[, ModelVar.]
Costs. = Costs.YrCs[yr,]
PaydRate = Payd..Yr[yr, "RatePerMile"]
CongPrice = CongPrice
VmtSurcharge = VmtSurcharge
ExtraModCost = ExtraModCost
VmtExtCost.Hh <- Data..$Dvmt * sum( Costs.[ c( "AirPollution", "OtherResource", "Safety", "Noise" ) ] )
FuelExtCost.Hh <- Data..$FuelGallons * Costs.[ "EnergySecurity" ]
Co2eExtCost.Hh <- ( Data..$FuelCo2e + Data..$ElecCo2e ) * Costs.[ "ClimateChange" ]
TotExtCost.Hh <- VmtExtCost.Hh + FuelExtCost.Hh + Co2eExtCost.Hh
AddedExtTax.Hh <- TotExtCost.Hh * Costs.[ "PropExtPaid" ]
FuelCost.Hh <- Data..$FuelGallons * Costs.[ "FuelCost" ]
PowerCost.Hh <- Data..$ElecKwh * Costs.[ "KwhCost" ]
# Calculate vehicle road system use taxes
GasTax.Hh <- Data..$FuelGallons * Costs.[ "GasTax" ]
CongTax.Hh <- Data..$Dvmt * CongPrice
CongTax.Hh[ Data..$DevType != "Metropolitan" ] <- 0
VmtTax.Hh <- Data..$Dvmt * ( Costs.[ "VmtTax" ] + VmtSurcharge )
RoadUseTax.Hh <- GasTax.Hh + CongTax.Hh + VmtTax.Hh
# Calculate total daily PAYD cost
PaydCost.Hh <- Data..$Dvmt * Data..$Payd * PaydRate
# Calculate total vehicle cost
TotCost.Hh <- FuelCost.Hh + PowerCost.Hh + RoadUseTax.Hh + AddedExtTax.Hh +
PaydCost.Hh + Data..$DailyPkgCost
BaseCost.Hh <- FuelCost.Hh + PowerCost.Hh + RoadUseTax.Hh + AddedExtTax.Hh
HasVeh.Hh <- Data..$Hhvehcnt >= 1
HasDvmt.Hh <- Data..$Dvmt > 0
AveBaseCostMile <- mean( BaseCost.Hh[ HasVeh.Hh & HasDvmt.Hh ] / Data..$Dvmt[ HasVeh.Hh & HasDvmt.Hh ] )
AveExtCostMile <- mean( TotExtCost.Hh[ HasVeh.Hh & HasDvmt.Hh ] / Data..$Dvmt[ HasVeh.Hh & HasDvmt.Hh ] )
# Calculate vehicle costs for zero vehicle households and households that have no DVMT
HasNoVehOrNoDvmt.Hh <- !HasVeh.Hh | !HasDvmt.Hh
TotCost.Hh[ HasNoVehOrNoDvmt.Hh  ] <- Data..$Dvmt[ HasNoVehOrNoDvmt.Hh ] * 5 * AveBaseCostMile
TotExtCost.Hh[ HasNoVehOrNoDvmt.Hh  ] <- Data..$Dvmt[ HasNoVehOrNoDvmt.Hh ] * AveExtCostMile
FuelCost.Hh[ HasNoVehOrNoDvmt.Hh ] <- 0
PowerCost.Hh[ HasNoVehOrNoDvmt.Hh ] <- 0
RoadUseTax.Hh[ HasNoVehOrNoDvmt.Hh ] <- 0
AddedExtTax.Hh[ HasNoVehOrNoDvmt.Hh ] <- 0
PaydCost.Hh[ HasNoVehOrNoDvmt.Hh ] <- 0
# Calculate the average household costs per mile to use in budget calculations
#-----------------------------------------------------------------------------
# Calculate the average cost per mile
FutrCostPerMile.Hh <- TotCost.Hh / Data..$Dvmt
# Calculate average cost per mile for households with no vehicles or no DVMT
FutrCostPerMile.Hh[ HasNoVehOrNoDvmt.Hh ] <- 5 * AveBaseCostMile
# Calculate household vehicle ownership costs
#--------------------------------------------
# Calculate total vehicle ownership expenses
IsPayd.Hh <- Data..$Payd == 1
VehOwnExp.Hh <-numeric( length( IsPayd.Hh ) )
VehOwnExp.Hh[ HasVeh.Hh & IsPayd.Hh ] <- Data..$DepExp[ HasVeh.Hh & IsPayd.Hh ] / 365 +
Data..$Dvmt[ HasVeh.Hh & IsPayd.Hh ] * sum( Costs.[ c( "VehMaint", "VehTire" ) ] ) +
Data..$Hhvehcnt[ HasVeh.Hh & IsPayd.Hh ] * sum( Costs.[ c( "VehFin", "VehReg" ) ] ) / 365
str(HasVeh.Hh)
sum(is.na(HasVeh.Hh))
table(IsPayd.Hh)
summary(IsPayd.Hh)
str(Data..$Payd)
SynPop..$Payd
ModelVar. <-
c(
"Houseid",
"Age0to14",
"Age15to19",
"Age20to29",
"Age30to54",
"Age55to64",
"Age65Plus",
"Dvmt",
"Hhvehcnt",
"Hhincttl",
"VehType",
"VehAge"
)
PaydWeights.Hh <-
estPaydWeights(Data.. = SynPop..[ModelVar.], yr = yr)
head(PaydWeights.Hh)
table(PaydWeights.Hh)
?elseif
?condition
?if
?else
?if
selectFromWeights <- function(Weight.Hh, PropToSelect) {
#Check that proportion to select is in proper range
if (PropToSelect > 1 | PropToSelect < 0) {
stop("PAYD: selectFromWeights(): PropToSelect argument must be in the range of 0 to 1")
}
#Select all qualifying households if the proportion to select is 1
if (PropToSelect == 1) {
return(as.numeric(Weight.Hh != 0))
} else {
if (all(Weight.Hh == 0)) {
#Select no qualifying households if the proportion of select is 0
return(Weight.Hh)
} else {
#Otherwise select qualifying households as function of weights
#Calculate factor to convert weights into probabilities that
#produce the required number of PAYD households
NumToSelect <-
sum(Weight.Hh > 0) * PropToSelect #Calculate number to be selected
WeightsTable <-
table(Weight.Hh[Weight.Hh > 0]) #Tabulate qualifying households by weight
Factor <-
sum(WeightsTable * as.numeric(names(WeightsTable))) / NumToSelect #Calculate factor
#Select the households using factor to calculate probabilities from weights
return(as.numeric((Weight.Hh / Factor) > runif(length(Weight.Hh))))
}
}
}
ModelVar. <-
c(
"Houseid",
"Age0to14",
"Age15to19",
"Age20to29",
"Age30to54",
"Age55to64",
"Age65Plus",
"Dvmt",
"Hhvehcnt",
"Hhincttl",
"VehType",
"VehAge"
)
PaydWeights.Hh <-
estPaydWeights(Data.. = SynPop..[ModelVar.], yr = yr)
summary(PaydWeights.Hh)
SynPop..$Payd <-
selectFromWeights(PaydWeights.Hh, PropToSelect = Payd..Yr[yr, "Proportion"])
summary(SynPop..$Payd)
selectFromWeights <- function(Weight.Hh, PropToSelect) {
#Check that proportion to select is in proper range
if (PropToSelect > 1 | PropToSelect < 0) {
stop("PAYD: selectFromWeights(): PropToSelect argument must be in the range of 0 to 1")
}
#Select all qualifying households if the proportion to select is 1
if (PropToSelect == 1) {
return(as.numeric(Weight.Hh != 0))
} else {
if (all(Weight.Hh == 0)) {
#Select no qualifying households if the proportion of select is 0
return(Weight.Hh)
} else {
#Otherwise select qualifying households as function of weights
#Calculate factor to convert weights into probabilities that
#produce the required number of PAYD households
NumToSelect <-
sum(Weight.Hh > 0) * PropToSelect #Calculate number to be selected
WeightsTable <-
table(Weight.Hh[Weight.Hh > 0]) #Tabulate qualifying households by weight
Factor <-
sum(WeightsTable * as.numeric(names(WeightsTable))) / NumToSelect #Calculate factor
#Select the households using factor to calculate probabilities from weights
return(as.numeric((Weight.Hh / Factor) > runif(length(Weight.Hh))))
}
}
}
save( selectFromWeights, file="model/selectFromWeights.RData" )
#4) The GreenSTEP_Sim_Outputs.r module computes summary output tables from the
source('F:/Documents/Work/Projects/State-3.5/example/scripts/GreenSTEP.r')
co
SynPop..$Payd
sort(names(GreenSTEP_))
grep("Payd", ls())
estPaydWeights()
estPaydWeights
selectFromWeights
ModelVar. <-
c(
"Houseid",
"Age0to14",
"Age15to19",
"Age20to29",
"Age30to54",
"Age55to64",
"Age65Plus",
"Dvmt",
"Hhvehcnt",
"Hhincttl",
"VehType",
"VehAge"
)
PaydWeights.Hh <-
estPaydWeights(Data.. = SynPop..[ModelVar.], yr = yr)
summary(PaydWeights.Hh)
selectFromWeights(PaydWeights.Hh, PropToSelect = Payd..Yr[yr, "Proportion"])
selectFromWeights
selectFromWeights <- function(Weight.Hh, PropToSelect) {
#Check that proportion to select is in proper range
if (PropToSelect > 1 | PropToSelect < 0) {
stop("PAYD: selectFromWeights(): PropToSelect argument must be in the range of 0 to 1")
}
#Select all qualifying households if the proportion to select is 1
if (PropToSelect == 1) {
return(as.numeric(Weight.Hh != 0))
} else {
if (all(Weight.Hh == 0)) {
#Select no qualifying households if the proportion of select is 0
return(Weight.Hh)
} else {
#Otherwise select qualifying households as function of weights
#Calculate factor to convert weights into probabilities that
#produce the required number of PAYD households
NumToSelect <-
sum(Weight.Hh > 0) * PropToSelect #Calculate number to be selected
WeightsTable <-
table(Weight.Hh[Weight.Hh > 0]) #Tabulate qualifying households by weight
Factor <-
sum(WeightsTable * as.numeric(names(WeightsTable))) / NumToSelect #Calculate factor
#Select the households using factor to calculate probabilities from weights
return(as.numeric((Weight.Hh / Factor) > runif(length(Weight.Hh))))
}
}
}
source('F:/Documents/Work/Projects/State-3.5/example/scripts/GreenSTEP.r')
#Read in parameters that are unique to the model run
#===================================================
source("run_parameters.txt")
#Identify directory locations for model, inputs, etc.
#====================================================
# Make a list to store the directory references
Dir_ <- list()
# Directory references are made with respect to the run directory
Dir_$RunDir <- getwd()
# The scenario inputs directory location
Dir_$InputDir <- "scenario/inputs"
# The scenario outputs directory location
Dir_$OutputDir <- "scenario/outputs"
# Directory containing model objects and inputs
Dir_$ModelDir <- "model"
# Directory where model scripts are located
Dir_$ScriptDir <- "scripts"
attach(Dir_)
#Define function to load an RData object to an object name
#=========================================================
assignLoad <- function(filename) {
load(filename)
get(ls()[ls() != "filename"])
}
#Run the GreenSTEP_Inputs.r script
#=================================
#The GreenSTEP_Inputs.r script loads all of the data objects needed to run the
#model.
source(paste(ScriptDir, "/GreenSTEP_Inputs.r", sep = ""))
source("run_parameters.txt")
#Identify directory locations for model, inputs, etc.
#====================================================
# Make a list to store the directory references
Dir_ <- list()
# Directory references are made with respect to the run directory
Dir_$RunDir <- getwd()
# The scenario inputs directory location
Dir_$InputDir <- "scenario/inputs"
# The scenario outputs directory location
Dir_$OutputDir <- "scenario/outputs"
# Directory containing model objects and inputs
Dir_$ModelDir <- "model"
# Directory where model scripts are located
Dir_$ScriptDir <- "scripts"
attach(Dir_)
#Define function to load an RData object to an object name
#=========================================================
assignLoad <- function(filename) {
load(filename)
get(ls()[ls() != "filename"])
}
#Run the GreenSTEP_Inputs.r script
#=================================
#The GreenSTEP_Inputs.r script loads all of the data objects needed to run the
#model.
source(paste(ScriptDir, "/GreenSTEP_Inputs.r", sep = ""))
source(paste(ScriptDir, "/calc_summary_measures.r", sep=""))
#Read in parameters that are unique to the model run
#===================================================
source("run_parameters.txt")
#Identify directory locations for model, inputs, etc.
#====================================================
# Make a list to store the directory references
Dir_ <- list()
# Directory references are made with respect to the run directory
Dir_$RunDir <- getwd()
# The scenario inputs directory location
Dir_$InputDir <- "scenario/inputs"
# The scenario outputs directory location
Dir_$OutputDir <- "scenario/outputs"
# Directory containing model objects and inputs
Dir_$ModelDir <- "model"
# Directory where model scripts are located
Dir_$ScriptDir <- "scripts"
attach(Dir_)
#Define function to load an RData object to an object name
#=========================================================
assignLoad <- function(filename) {
load(filename)
get(ls()[ls() != "filename"])
}
source(paste(ScriptDir, "/calc_summary_measures.r", sep=""))
#Read in parameters that are unique to the model run
#===================================================
source("run_parameters.txt")
#Identify directory locations for model, inputs, etc.
#====================================================
# Make a list to store the directory references
Dir_ <- list()
# Directory references are made with respect to the run directory
Dir_$RunDir <- getwd()
# The scenario inputs directory location
Dir_$InputDir <- "scenario/inputs"
# The scenario outputs directory location
Dir_$OutputDir <- "scenario/outputs"
# Directory containing model objects and inputs
Dir_$ModelDir <- "model"
# Directory where model scripts are located
Dir_$ScriptDir <- "scripts"
attach(Dir_)
#Define function to load an RData object to an object name
#=========================================================
assignLoad <- function(filename) {
load(filename)
get(ls()[ls() != "filename"])
}
source(paste(ScriptDir, "/calc_summary_measures.r", sep=""))
StateResults_ <- list()
CountyResults_ <- list()
#Calculate summary measures for all years
for (yr in RunYears) {
StateResults_[[yr]] <- calcStateMeasures(yr)
CountyResults_[[yr]] <- calcCountyMeasures(yr)
}
StateResults_
str(StateResults_)
str(StateResults_[[1]])
StateResults_ <- list()
CountyResults_ <- list()
#Calculate summary measures for all years
for (yr in RunYears) {
StateResults_[[yr]] <- calcStateMeasures(yr)
CountyResults_[[yr]] <- calcCountyMeasures(yr)
}
str(StateResults_[[1]])
StateResults_ <- list()
CountyResults_ <- list()
#Calculate summary measures for all years
for (yr in RunYears) {
StateResults_[[yr]] <- calcStateMeasures(yr)
CountyResults_[[yr]] <- calcCountyMeasures(yr)
}
str(StateResults_[[1]])
StateResults_ <- list()
CountyResults_ <- list()
#Calculate summary measures for all years
for (yr in RunYears) {
StateResults_[[yr]] <- calcStateMeasures(yr)
CountyResults_[[yr]] <- calcCountyMeasures(yr)
}
str(StateResults_[[1]])
#Read in parameters that are unique to the model run
#===================================================
source("run_parameters.txt")
#Identify directory locations for model, inputs, etc.
#====================================================
# Make a list to store the directory references
Dir_ <- list()
# Directory references are made with respect to the run directory
Dir_$RunDir <- getwd()
# The scenario inputs directory location
Dir_$InputDir <- "scenario/inputs"
# The scenario outputs directory location
Dir_$OutputDir <- "scenario/outputs"
# Directory containing model objects and inputs
Dir_$ModelDir <- "model"
# Directory where model scripts are located
Dir_$ScriptDir <- "scripts"
attach(Dir_)
#Define function to load an RData object to an object name
#=========================================================
assignLoad <- function(filename) {
load(filename)
get(ls()[ls() != "filename"])
}
source(paste(ScriptDir, "/calc_summary_measures.r", sep=""))
source(paste(ScriptDir, "/calc_summary_measures.r", sep=""))
source('F:/Documents/Work/Projects/State-3.6/example1/scripts/GreenSTEP.r')
co
head(SynPop..)
summary(SynPop..$AveWalkTrips)
summary(SynPop..$AveBikeTrips)
summary(SynPop..$AveTransitTrips)
any(IsMetro.)
ModelVar.
str(AltModeTrips_)
calcAltModeTrips
AltModeTrips_ <-
calcAltModeTrips(SynPop..[!IsMetro., ModelVar.],
AltModeModels_, "NonMetro")
SynPop..$AveWalkTrips[IsMetro.] <- AltModeTrips_$Walk
SynPop..$AveBikeTrips[IsMetro.] <- AltModeTrips_$Bike
SynPop..$AveTransitTrips[IsMetro.] <- AltModeTrips_$Transit
summary(SynPop..$AveWalkTrips)
AltModeTrips_ <-
calcAltModeTrips(SynPop..[!IsMetro., ModelVar.],
AltModeModels_, "NonMetro")
str(AltModeTrips_)
SynPop..$AveWalkTrips[!IsMetro.] <- AltModeTrips_$Walk
SynPop..$AveBikeTrips[!IsMetro.] <- AltModeTrips_$Bike
SynPop..$AveTransitTrips[!IsMetro.] <- AltModeTrips_$Transit
summary(SynPop..$AveWalkTrips)
summary(SynPop..$AveBikeTrips)
summary(SynPop..$AveTransitTrips)
AltModeTrips_ <-
calcAltModeTrips(SynPop..[IsMetro., ModelVar.],
AltModeModels_, "NonMetro")
SynPop..$AveWalkTrips[IsMetro.] <- AltModeTrips_$Walk
SynPop..$AveBikeTrips[IsMetro.] <- AltModeTrips_$Bike
SynPop..$AveTransitTrips[IsMetro.] <- AltModeTrips_$Transit
rm(ModelVar., AltModeTrips_)
source('F:/Documents/Work/Projects/State-3.6/example1/scripts/GreenSTEP.r')
source('F:/Documents/Work/Projects/State-3.6/example1/scripts/GreenSTEP.r')
#Read in parameters that are unique to the model run
#===================================================
source("run_parameters.txt")
#Identify directory locations for model, inputs, etc.
#====================================================
# Make a list to store the directory references
Dir_ <- list()
# Directory references are made with respect to the run directory
Dir_$RunDir <- getwd()
# The scenario inputs directory location
Dir_$InputDir <- "scenario/inputs"
# The scenario outputs directory location
Dir_$OutputDir <- "scenario/outputs"
# Directory containing model objects and inputs
Dir_$ModelDir <- "model"
# Directory where model scripts are located
Dir_$ScriptDir <- "scripts"
attach(Dir_)
#Define function to load an RData object to an object name
#=========================================================
assignLoad <- function(filename) {
load(filename)
get(ls()[ls() != "filename"])
}
if (!OnlySynthesizeHh) {
source(paste(ScriptDir, "/calc_summary_measures.r", sep=""))
}
if (!OnlySynthesizeHh) {
source(paste(ScriptDir, "/calc_summary_measures.r", sep=""))
}
source('F:/Documents/Work/Projects/State-3.6/example1/scripts/GreenSTEP.r')
source('F:/Documents/Work/Projects/State-3.6/example1/scripts/GreenSTEP.r')
source('F:/Documents/Work/Projects/State-3.6/example1/scripts/GreenSTEP.r')
source('F:/Documents/Work/Projects/State-3.6/example1/scripts/GreenSTEP.r')
source('~/GitHub/GreenSTEP/Version_3.6/Example/scripts/GreenSTEP_Sim.r')
